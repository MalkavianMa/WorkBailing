using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;

namespace Config
{
    public class StringHelper
    {
        public const string c_HexCharList = "0123456789ABCDEF";
        public const string c_Base64CharList = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        public const string StartPunctuaction = "!),.:;?]}¨·ˇˉ―‖’”…∶、。〃々〉》」』】〕〗！＂＇），．：；？］｀｜｝～￠";
        public const string EndPunctuaction = "([{·‘“〈《「『【〔〖（．［｛￡￥";

        /// <summary>
        /// 获取使用指定连接符连接list的字符串
        /// </summary>
        /// <param name="list">要连接的内容 里面的item使用tostring方法获取字符串</param>
        /// <param name="joiner">连接符</param>
        /// <returns></returns>
        public static string GetStrJoinFromList(IList<decimal> list, string joiner)
        {
            StringBuilder sb = new StringBuilder();
            int len = list.Count;
            if (len < 1)
            {
                return "";
            }
            if (len >= 1)
            {
                for (int le = 0; le < len - 1; le++)
                {
                    sb.Append(list[le].ToString());
                    sb.Append(joiner);
                }
                sb.Append(list[len - 1].ToString());
            }
            return sb.ToString();
        }

        /// <summary>
        /// 获取使用指定连接符连接list的字符串
        /// </summary>
        /// <param name="list">要连接的内容 里面的item使用tostring方法获取字符串</param>
        /// <param name="joiner">连接符</param>
        /// <returns></returns>
        public static string GetStrJoinFromList(decimal[] list, string joiner)
        {
            StringBuilder sb = new StringBuilder();
            int len = list.Length;
            if (len < 1)
            {
                return "";
            }
            if (len >= 1)
            {
                for (int le = 0; le < len - 1; le++)
                {
                    sb.Append(list[le].ToString());
                    sb.Append(joiner);
                }
                sb.Append(list[len - 1].ToString());
            }
            return sb.ToString();
        }

        /// <summary>
        /// 获取使用指定连接符连接list的字符串
        /// </summary>
        /// <param name="list">要连接的内容 里面的item使用tostring方法获取字符串</param>
        /// <param name="joiner">连接符</param>
        /// <returns></returns>
        public static string GetStrJoinFromList(IList<int> list, string joiner)
        {
            StringBuilder sb = new StringBuilder();
            int len = list.Count;
            if (len < 1)
            {
                return "";
            }
            if (len >= 1)
            {
                for (int le = 0; le < len - 1; le++)
                {
                    sb.Append(list[le].ToString());
                    sb.Append(joiner);
                }
                sb.Append(list[len - 1].ToString());
            }
            return sb.ToString();
        }

        /// <summary>
        /// 获取使用指定连接符连接list的字符串
        /// </summary>
        /// <param name="list">要连接的内容 里面的item使用tostring方法获取字符串</param>
        /// <param name="joiner">连接符</param>
        /// <param name="isInSqlStr">是否是在sql语句中，如果为true 则每个字符串使用''包含</param>
        /// <returns></returns>
        public static string GetStrJoinFromList(IList<string> list, string joiner, bool isInSqlStr)
        {
            StringBuilder sb = new StringBuilder();
            int len = list.Count;
            if (len < 1)
            {
                return "";
            }
            if (len >= 1)
            {
                for (int le = 0; le < len - 1; le++)
                {
                    if (isInSqlStr)
                    {
                        sb.Append("'");
                    }
                    sb.Append(list[le].ToString());
                    if (isInSqlStr)
                    {
                        sb.Append("'");
                    }
                    sb.Append(joiner);
                }
                if (isInSqlStr)
                {
                    sb.Append("'");
                }
                sb.Append(list[len - 1].ToString());
                if (isInSqlStr)
                {
                    sb.Append("'");
                }
            }
            return sb.ToString();
        }

        /// <summary>
        /// 获取由指定连接符连接的字符串分隔转换成的ILIST列表
        /// </summary>
        /// <param name="strSource">需要分隔转换的字符串</param>
        /// <param name="joiner">连接符</param>
        /// <returns></returns>
        public static IList<string> GetListFromStrJoin(string strSource, char joiner)
        {
            IList<string> reList = new List<string>();

            if (strSource.Trim().Length == 0)
            {
                return reList;
            }

            string[] strArray = strSource.Trim().Split(joiner);

            foreach (string str in strArray)
            {
                reList.Add(str);
            }

            return reList;
        }

        /// <summary>
        /// 获取由指定连接符连接的字符串分隔转换成的ILIST列表
        /// </summary>
        /// <param name="strSource">需要分隔转换的字符串</param>
        /// <param name="joiner">连接符</param>
        /// <returns></returns>
        public static IList<decimal> GetDecimalListFromStrJoin(string strSource, char joiner)
        {
            IList<decimal> reList = new List<decimal>();

            if (strSource.Trim().Length == 0)
            {
                return reList;
            }

            string[] strArray = strSource.Trim().Split(joiner);

            foreach (string str in strArray)
            {
                reList.Add(decimal.Parse(str));
            }

            return reList;
        }

        /// <summary>
        /// 将传入的字符串以特定字符分隔后，添加单引号后拼接返回
        /// </summary>
        /// <param name="SourceStr"></param>
        /// <param name="Joiner"></param>
        /// <returns></returns>
        public static string GetStrJoinSingleQuotesFromStr(string SourceStr, char Joiner)
        {
            if (String.IsNullOrEmpty(SourceStr) == true)
            {
                return "";
            }

            string[] sourceArray = SourceStr.Split(Joiner);

            IList<string> list = new List<string>();

            foreach (string temp in sourceArray)
            {
                list.Add(temp);
            }

            return StringHelper.GetStrJoinFromList(list, Joiner.ToString(), true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="vSymbol"></param>
        /// <returns></returns>
        public static int GetSymbolSplitLevel(char vSymbol)
        {
            if (vSymbol == '.' || vSymbol == '。')
                return 5;
            if (vSymbol == ';' || vSymbol == '；')
                return 4;
            if (vSymbol == ',' || vSymbol == '，')
                return 3;
            if (vSymbol == '、')
                return 2;
            if (char.IsWhiteSpace(vSymbol))
                return 1;
            return 0;
        }

        /// <summary>
        /// 使用GB2312编码格式读取一个文本文件的内容
        /// </summary>
        /// <param name="strFile">文件名</param>
        /// <returns>读取的文件内容，若文件不存在或发生错误则返回空引用</returns>
        public static string LoadAnsiFile(string strFile)
        {
            System.IO.StreamReader myReader = null;
            try
            {
                if (System.IO.File.Exists(strFile))
                {
                    myReader = new System.IO.StreamReader(strFile, System.Text.Encoding.GetEncoding(936));
                    string strText = myReader.ReadToEnd();
                    myReader.Close();
                    return strText;
                }
            }
            catch
            {
                if (myReader != null)
                    myReader.Close();
            }
            return null;
        }//public static string LoadAnsiFile( string strFile)

        /// <summary>
        /// 根据一个分隔字符拆分一个字符串
        /// </summary>
        /// <param name="strText">要拆分的字符串</param>
        /// <param name="Spliter">分隔字符</param>
        /// <returns>两个元素的字符串数组,分别是原始字符串中分隔字符前面的部分和后面的部分,若参数不正确则返回空引用
        /// 若没找到分隔字符则第一个元素为原始字符串,第二个为无内容的字符串</returns>
        public static string[] SplistString(string strText, char Spliter)
        {
            if (strText == null || strText.Length == 0)
                return null;
            else
            {
                int index = strText.IndexOf(Spliter);
                string[] strItems = new string[2];
                if (index >= 0)
                {
                    strItems[0] = strText.Substring(0, index);
                    strItems[1] = strText.Substring(index + 1);
                }
                else
                {
                    strItems[0] = strText;
                    strItems[1] = "";
                }
                return strItems;
            }
        }// string[] SplitString()

        /// <summary>
        /// 根据一个分隔字符串拆分一个字符串
        /// </summary>
        /// <param name="strText">要拆分的字符串</param>
        /// <param name="strSpliter">分隔字符串</param>
        /// <returns>两个元素的字符串数组,分别是原始字符串中分隔字符串前面的部分和后面的部分,若参数不正确则返回空引用
        /// 若没找到分隔字符串则第一个元素为原始字符串,第二个为无内容的字符串</returns>
        public static string[] SplistString(string strText, string strSpliter)
        {
            if (strText == null || strSpliter == null || strText.Length == 0)
                return null;
            else
            {
                int index = strText.IndexOf(strSpliter);
                string[] strItems = new string[2];
                if (index >= 0)
                {
                    strItems[0] = strText.Substring(0, index);
                    strItems[1] = strText.Substring(index + strSpliter.Length);
                }
                else
                {
                    strItems[0] = strText;
                    strItems[1] = "";
                }
                return strItems;
            }
        }// string[] SplitString()

        /// <summary>
        /// 
        /// </summary>
        /// <param name="strItems"></param>
        /// <param name="strItemSplit"></param>
        /// <param name="strValueSplit"></param>
        /// <returns></returns>
        public static string CombinStringArray(string[] strItems, string strItemSplit, string strValueSplit)
        {
            if (strItems != null && strItems.Length > 0 && strItems.Length % 2 == 0)
            {
                System.Text.StringBuilder myStr = new System.Text.StringBuilder();
                int Num = strItems.Length / 2;
                for (int iCount = 0; iCount < strItems.Length; iCount += 2)
                {
                    if (myStr.Length > 0)
                        myStr.Append(strItemSplit);
                    myStr.Append(strItems[iCount]);
                    myStr.Append(strValueSplit);
                    myStr.Append(strItems[iCount + 1]);
                }
                return myStr.ToString();
            }
            return null;
        }

        /// <summary>
        /// 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 GetChineseSpell 函数使用,本表收录的字符的Unicode编码范围为19968至40869
        /// </summary>
        private static string strChineseFirstPY =
            "YDYQSXMWZSSXJBYMGCCZQPSSQBYCDSCDQLDYLYBSSJGYZZJJFKCCLZDHWDWZJLJPFYYNWJJTMYHZWZHFLZPPQHGSCYYYNJQYXXGJ"
            + "HHSDSJNKKTMOMLCRXYPSNQSECCQZGGLLYJLMYZZSECYKYYHQWJSSGGYXYZYJWWKDJHYCHMYXJTLXJYQBYXZLDWRDJRWYSRLDZJPC"
            + "BZJJBRCFTLECZSTZFXXZHTRQHYBDLYCZSSYMMRFMYQZPWWJJYFCRWFDFZQPYDDWYXKYJAWJFFXYPSFTZYHHYZYSWCJYXSCLCXXWZ"
            + "ZXNBGNNXBXLZSZSBSGPYSYZDHMDZBQBZCWDZZYYTZHBTSYYBZGNTNXQYWQSKBPHHLXGYBFMJEBJHHGQTJCYSXSTKZHLYCKGLYSMZ"
            + "XYALMELDCCXGZYRJXSDLTYZCQKCNNJWHJTZZCQLJSTSTBNXBTYXCEQXGKWJYFLZQLYHYXSPSFXLMPBYSXXXYDJCZYLLLSJXFHJXP"
            + "JBTFFYABYXBHZZBJYZLWLCZGGBTSSMDTJZXPTHYQTGLJSCQFZKJZJQNLZWLSLHDZBWJNCJZYZSQQYCQYRZCJJWYBRTWPYFTWEXCS"
            + "KDZCTBZHYZZYYJXZCFFZZMJYXXSDZZOTTBZLQWFCKSZSXFYRLNYJMBDTHJXSQQCCSBXYYTSYFBXDZTGBCNSLCYZZPSAZYZZSCJCS"
            + "HZQYDXLBPJLLMQXTYDZXSQJTZPXLCGLQTZWJBHCTSYJSFXYEJJTLBGXSXJMYJQQPFZASYJNTYDJXKJCDJSZCBARTDCLYJQMWNQNC"
            + "LLLKBYBZZSYHQQLTWLCCXTXLLZNTYLNEWYZYXCZXXGRKRMTCNDNJTSYYSSDQDGHSDBJGHRWRQLYBGLXHLGTGXBQJDZPYJSJYJCTM"
            + "RNYMGRZJCZGJMZMGXMPRYXKJNYMSGMZJYMKMFXMLDTGFBHCJHKYLPFMDXLQJJSMTQGZSJLQDLDGJYCALCMZCSDJLLNXDJFFFFJCZ"
            + "FMZFFPFKHKGDPSXKTACJDHHZDDCRRCFQYJKQCCWJDXHWJLYLLZGCFCQDSMLZPBJJPLSBCJGGDCKKDEZSQCCKJGCGKDJTJDLZYCXK"
            + "LQSCGJCLTFPCQCZGWPJDQYZJJBYJHSJDZWGFSJGZKQCCZLLPSPKJGQJHZZLJPLGJGJJTHJJYJZCZMLZLYQBGJWMLJKXZDZNJQSYZ"
            + "MLJLLJKYWXMKJLHSKJGBMCLYYMKXJQLBMLLKMDXXKWYXYSLMLPSJQQJQXYXFJTJDXMXXLLCXQBSYJBGWYMBGGBCYXPJYGPEPFGDJ"
            + "GBHBNSQJYZJKJKHXQFGQZKFHYGKHDKLLSDJQXPQYKYBNQSXQNSZSWHBSXWHXWBZZXDMNSJBSBKBBZKLYLXGWXDRWYQZMYWSJQLCJ"
            + "XXJXKJEQXSCYETLZHLYYYSDZPAQYZCMTLSHTZCFYZYXYLJSDCJQAGYSLCQLYYYSHMRQQKLDXZSCSSSYDYCJYSFSJBFRSSZQSBXXP"
            + "XJYSDRCKGJLGDKZJZBDKTCSYQPYHSTCLDJDHMXMCGXYZHJDDTMHLTXZXYLYMOHYJCLTYFBQQXPFBDFHHTKSQHZYYWCNXXCRWHOWG"
            + "YJLEGWDQCWGFJYCSNTMYTOLBYGWQWESJPWNMLRYDZSZTXYQPZGCWXHNGPYXSHMYQJXZTDPPBFYHZHTJYFDZWKGKZBLDNTSXHQEEG"
            + "ZZYLZMMZYJZGXZXKHKSTXNXXWYLYAPSTHXDWHZYMPXAGKYDXBHNHXKDPJNMYHYLPMGOCSLNZHKXXLPZZLBMLSFBHHGYGYYGGBHSC"
            + "YAQTYWLXTZQCEZYDQDQMMHTKLLSZHLSJZWFYHQSWSCWLQAZYNYTLSXTHAZNKZZSZZLAXXZWWCTGQQTDDYZTCCHYQZFLXPSLZYGPZ"
            + "SZNGLNDQTBDLXGTCTAJDKYWNSYZLJHHZZCWNYYZYWMHYCHHYXHJKZWSXHZYXLYSKQYSPSLYZWMYPPKBYGLKZHTYXAXQSYSHXASMC"
            + "HKDSCRSWJPWXSGZJLWWSCHSJHSQNHCSEGNDAQTBAALZZMSSTDQJCJKTSCJAXPLGGXHHGXXZCXPDMMHLDGTYBYSJMXHMRCPXXJZCK"
            + "ZXSHMLQXXTTHXWZFKHCCZDYTCJYXQHLXDHYPJQXYLSYYDZOZJNYXQEZYSQYAYXWYPDGXDDXSPPYZNDLTWRHXYDXZZJHTCXMCZLHP"
            + "YYYYMHZLLHNXMYLLLMDCPPXHMXDKYCYRDLTXJCHHZZXZLCCLYLNZSHZJZZLNNRLWHYQSNJHXYNTTTKYJPYCHHYEGKCTTWLGQRLGG"
            + "TGTYGYHPYHYLQYQGCWYQKPYYYTTTTLHYHLLTYTTSPLKYZXGZWGPYDSSZZDQXSKCQNMJJZZBXYQMJRTFFBTKHZKBXLJJKDXJTLBWF"
            + "ZPPTKQTZTGPDGNTPJYFALQMKGXBDCLZFHZCLLLLADPMXDJHLCCLGYHDZFGYDDGCYYFGYDXKSSEBDHYKDKDKHNAXXYBPBYYHXZQGA"
            + "FFQYJXDMLJCSQZLLPCHBSXGJYNDYBYQSPZWJLZKSDDTACTBXZDYZYPJZQSJNKKTKNJDJGYYPGTLFYQKASDNTCYHBLWDZHBBYDWJR"
            + "YGKZYHEYYFJMSDTYFZJJHGCXPLXHLDWXXJKYTCYKSSSMTWCTTQZLPBSZDZWZXGZAGYKTYWXLHLSPBCLLOQMMZSSLCMBJCSZZKYDC"
            + "ZJGQQDSMCYTZQQLWZQZXSSFPTTFQMDDZDSHDTDWFHTDYZJYQJQKYPBDJYYXTLJHDRQXXXHAYDHRJLKLYTWHLLRLLRCXYLBWSRSZZ"
            + "SYMKZZHHKYHXKSMDSYDYCJPBZBSQLFCXXXNXKXWYWSDZYQOGGQMMYHCDZTTFJYYBGSTTTYBYKJDHKYXBELHTYPJQNFXFDYKZHQKZ"
            + "BYJTZBXHFDXKDASWTAWAJLDYJSFHBLDNNTNQJTJNCHXFJSRFWHZFMDRYJYJWZPDJKZYJYMPCYZNYNXFBYTFYFWYGDBNZZZDNYTXZ"
            + "EMMQBSQEHXFZMBMFLZZSRXYMJGSXWZJSPRYDJSJGXHJJGLJJYNZZJXHGXKYMLPYYYCXYTWQZSWHWLYRJLPXSLSXMFSWWKLCTNXNY"
            + "NPSJSZHDZEPTXMYYWXYYSYWLXJQZQXZDCLEEELMCPJPCLWBXSQHFWWTFFJTNQJHJQDXHWLBYZNFJLALKYYJLDXHHYCSTYYWNRJYX"
            + "YWTRMDRQHWQCMFJDYZMHMYYXJWMYZQZXTLMRSPWWCHAQBXYGZYPXYYRRCLMPYMGKSJSZYSRMYJSNXTPLNBAPPYPYLXYYZKYNLDZY"
            + "JZCZNNLMZHHARQMPGWQTZMXXMLLHGDZXYHXKYXYCJMFFYYHJFSBSSQLXXNDYCANNMTCJCYPRRNYTYQNYYMBMSXNDLYLYSLJRLXYS"
            + "XQMLLYZLZJJJKYZZCSFBZXXMSTBJGNXYZHLXNMCWSCYZYFZLXBRNNNYLBNRTGZQYSATSWRYHYJZMZDHZGZDWYBSSCSKXSYHYTXXG"
            + "CQGXZZSHYXJSCRHMKKBXCZJYJYMKQHZJFNBHMQHYSNJNZYBKNQMCLGQHWLZNZSWXKHLJHYYBQLBFCDSXDLDSPFZPSKJYZWZXZDDX"
            + "JSMMEGJSCSSMGCLXXKYYYLNYPWWWGYDKZJGGGZGGSYCKNJWNJPCXBJJTQTJWDSSPJXZXNZXUMELPXFSXTLLXCLJXJJLJZXCTPSWX"
            + "LYDHLYQRWHSYCSQYYBYAYWJJJQFWQCQQCJQGXALDBZZYJGKGXPLTZYFXJLTPADKYQHPMATLCPDCKBMTXYBHKLENXDLEEGQDYMSAW"
            + "HZMLJTWYGXLYQZLJEEYYBQQFFNLYXRDSCTGJGXYYNKLLYQKCCTLHJLQMKKZGCYYGLLLJDZGYDHZWXPYSJBZKDZGYZZHYWYFQYTYZ"
            + "SZYEZZLYMHJJHTSMQWYZLKYYWZCSRKQYTLTDXWCTYJKLWSQZWBDCQYNCJSRSZJLKCDCDTLZZZACQQZZDDXYPLXZBQJYLZLLLQDDZ"
            + "QJYJYJZYXNYYYNYJXKXDAZWYRDLJYYYRJLXLLDYXJCYWYWNQCCLDDNYYYNYCKCZHXXCCLGZQJGKWPPCQQJYSBZZXYJSQPXJPZBSB"
            + "DSFNSFPZXHDWZTDWPPTFLZZBZDMYYPQJRSDZSQZSQXBDGCPZSWDWCSQZGMDHZXMWWFYBPDGPHTMJTHZSMMBGZMBZJCFZWFZBBZMQ"
            + "CFMBDMCJXLGPNJBBXGYHYYJGPTZGZMQBQTCGYXJXLWZKYDPDYMGCFTPFXYZTZXDZXTGKMTYBBCLBJASKYTSSQYYMSZXFJEWLXLLS"
            + "ZBQJJJAKLYLXLYCCTSXMCWFKKKBSXLLLLJYXTYLTJYYTDPJHNHNNKBYQNFQYYZBYYESSESSGDYHFHWTCJBSDZZTFDMXHCNJZYMQW"
            + "SRYJDZJQPDQBBSTJGGFBKJBXTGQHNGWJXJGDLLTHZHHYYYYYYSXWTYYYCCBDBPYPZYCCZYJPZYWCBDLFWZCWJDXXHYHLHWZZXJTC"
            + "ZLCDPXUJCZZZLYXJJTXPHFXWPYWXZPTDZZBDZCYHJHMLXBQXSBYLRDTGJRRCTTTHYTCZWMXFYTWWZCWJWXJYWCSKYBZSCCTZQNHX"
            + "NWXXKHKFHTSWOCCJYBCMPZZYKBNNZPBZHHZDLSYDDYTYFJPXYNGFXBYQXCBHXCPSXTYZDMKYSNXSXLHKMZXLYHDHKWHXXSSKQYHH"
            + "CJYXGLHZXCSNHEKDTGZXQYPKDHEXTYKCNYMYYYPKQYYYKXZLTHJQTBYQHXBMYHSQCKWWYLLHCYYLNNEQXQWMCFBDCCMLJGGXDQKT"
            + "LXKGNQCDGZJWYJJLYHHQTTTNWCHMXCXWHWSZJYDJCCDBQCDGDNYXZTHCQRXCBHZTQCBXWGQWYYBXHMBYMYQTYEXMQKYAQYRGYZSL"
            + "FYKKQHYSSQYSHJGJCNXKZYCXSBXYXHYYLSTYCXQTHYSMGSCPMMGCCCCCMTZTASMGQZJHKLOSQYLSWTMXSYQKDZLJQQYPLSYCZTCQ"
            + "QPBBQJZCLPKHQZYYXXDTDDTSJCXFFLLCHQXMJLWCJCXTSPYCXNDTJSHJWXDQQJSKXYAMYLSJHMLALYKXCYYDMNMDQMXMCZNNCYBZ"
            + "KKYFLMCHCMLHXRCJJHSYLNMTJZGZGYWJXSRXCWJGJQHQZDQJDCJJZKJKGDZQGJJYJYLXZXXCDQHHHEYTMHLFSBDJSYYSHFYSTCZQ"
            + "LPBDRFRZTZYKYWHSZYQKWDQZRKMSYNBCRXQBJYFAZPZZEDZCJYWBCJWHYJBQSZYWRYSZPTDKZPFPBNZTKLQYHBBZPNPPTYZZYBQN"
            + "YDCPJMMCYCQMCYFZZDCMNLFPBPLNGQJTBTTNJZPZBBZNJKLJQYLNBZQHKSJZNGGQSZZKYXSHPZSNBCGZKDDZQANZHJKDRTLZLSWJ"
            + "LJZLYWTJNDJZJHXYAYNCBGTZCSSQMNJPJYTYSWXZFKWJQTKHTZPLBHSNJZSYZBWZZZZLSYLSBJHDWWQPSLMMFBJDWAQYZTCJTBNN"
            + "WZXQXCDSLQGDSDPDZHJTQQPSWLYYJZLGYXYZLCTCBJTKTYCZJTQKBSJLGMGZDMCSGPYNJZYQYYKNXRPWSZXMTNCSZZYXYBYHYZAX"
            + "YWQCJTLLCKJJTJHGDXDXYQYZZBYWDLWQCGLZGJGQRQZCZSSBCRPCSKYDZNXJSQGXSSJMYDNSTZTPBDLTKZWXQWQTZEXNQCZGWEZK"
            + "SSBYBRTSSSLCCGBPSZQSZLCCGLLLZXHZQTHCZMQGYZQZNMCOCSZJMMZSQPJYGQLJYJPPLDXRGZYXCCSXHSHGTZNLZWZKJCXTCFCJ"
            + "XLBMQBCZZWPQDNHXLJCTHYZLGYLNLSZZPCXDSCQQHJQKSXZPBAJYEMSMJTZDXLCJYRYYNWJBNGZZTMJXLTBSLYRZPYLSSCNXPHLL"
            + "HYLLQQZQLXYMRSYCXZLMMCZLTZSDWTJJLLNZGGQXPFSKYGYGHBFZPDKMWGHCXMSGDXJMCJZDYCABXJDLNBCDQYGSKYDQTXDJJYXM"
            + "SZQAZDZFSLQXYJSJZYLBTXXWXQQZBJZUFBBLYLWDSLJHXJYZJWTDJCZFQZQZZDZSXZZQLZCDZFJHYSPYMPQZMLPPLFFXJJNZZYLS"
            + "JEYQZFPFZKSYWJJJHRDJZZXTXXGLGHYDXCSKYSWMMZCWYBAZBJKSHFHJCXMHFQHYXXYZFTSJYZFXYXPZLCHMZMBXHZZSXYFYMNCW"
            + "DABAZLXKTCSHHXKXJJZJSTHYGXSXYYHHHJWXKZXSSBZZWHHHCWTZZZPJXSNXQQJGZYZYWLLCWXZFXXYXYHXMKYYSWSQMNLNAYCYS"
            + "PMJKHWCQHYLAJJMZXHMMCNZHBHXCLXTJPLTXYJHDYYLTTXFSZHYXXSJBJYAYRSMXYPLCKDUYHLXRLNLLSTYZYYQYGYHHSCCSMZCT"
            + "ZQXKYQFPYYRPFFLKQUNTSZLLZMWWTCQQYZWTLLMLMPWMBZSSTZRBPDDTLQJJBXZCSRZQQYGWCSXFWZLXCCRSZDZMCYGGDZQSGTJS"
            + "WLJMYMMZYHFBJDGYXCCPSHXNZCSBSJYJGJMPPWAFFYFNXHYZXZYLREMZGZCYZSSZDLLJCSQFNXZKPTXZGXJJGFMYYYSNBTYLBNLH"
            + "PFZDCYFBMGQRRSSSZXYSGTZRNYDZZCDGPJAFJFZKNZBLCZSZPSGCYCJSZLMLRSZBZZLDLSLLYSXSQZQLYXZLSKKBRXBRBZCYCXZZ"
            + "ZEEYFGKLZLYYHGZSGZLFJHGTGWKRAAJYZKZQTSSHJJXDCYZUYJLZYRZDQQHGJZXSSZBYKJPBFRTJXLLFQWJHYLQTYMBLPZDXTZYG"
            + "BDHZZRBGXHWNJTJXLKSCFSMWLSDQYSJTXKZSCFWJLBXFTZLLJZLLQBLSQMQQCGCZFPBPHZCZJLPYYGGDTGWDCFCZQYYYQYSSCLXZ"
            + "SKLZZZGFFCQNWGLHQYZJJCZLQZZYJPJZZBPDCCMHJGXDQDGDLZQMFGPSYTSDYFWWDJZJYSXYYCZCYHZWPBYKXRYLYBHKJKSFXTZJ"
            + "MMCKHLLTNYYMSYXYZPYJQYCSYCWMTJJKQYRHLLQXPSGTLYYCLJSCPXJYZFNMLRGJJTYZBXYZMSJYJHHFZQMSYXRSZCWTLRTQZSST"
            + "KXGQKGSPTGCZNJSJCQCXHMXGGZTQYDJKZDLBZSXJLHYQGGGTHQSZPYHJHHGYYGKGGCWJZZYLCZLXQSFTGZSLLLMLJSKCTBLLZZSZ"
            + "MMNYTPZSXQHJCJYQXYZXZQZCPSHKZZYSXCDFGMWQRLLQXRFZTLYSTCTMJCXJJXHJNXTNRZTZFQYHQGLLGCXSZSJDJLJCYDSJTLNY"
            + "XHSZXCGJZYQPYLFHDJSBPCCZHJJJQZJQDYBSSLLCMYTTMQTBHJQNNYGKYRQYQMZGCJKPDCGMYZHQLLSLLCLMHOLZGDYYFZSLJCQZ"
            + "LYLZQJESHNYLLJXGJXLYSYYYXNBZLJSSZCQQCJYLLZLTJYLLZLLBNYLGQCHXYYXOXCXQKYJXXXYKLXSXXYQXCYKQXQCSGYXXYQXY"
            + "GYTQOHXHXPYXXXULCYEYCHZZCBWQBBWJQZSCSZSSLZYLKDESJZWMYMCYTSDSXXSCJPQQSQYLYYZYCMDJDZYWCBTJSYDJKCYDDJLB"
            + "DJJSODZYSYXQQYXDHHGQQYQHDYXWGMMMAJDYBBBPPBCMUUPLJZSMTXERXJMHQNUTPJDCBSSMSSSTKJTSSMMTRCPLZSZMLQDSDMJM"
            + "QPNQDXCFYNBFSDQXYXHYAYKQYDDLQYYYSSZBYDSLNTFQTZQPZMCHDHCZCWFDXTMYQSPHQYYXSRGJCWTJTZZQMGWJJTJHTQJBBHWZ"
            + "PXXHYQFXXQYWYYHYSCDYDHHQMNMTMWCPBSZPPZZGLMZFOLLCFWHMMSJZTTDHZZYFFYTZZGZYSKYJXQYJZQBHMBZZLYGHGFMSHPZF"
            + "ZSNCLPBQSNJXZSLXXFPMTYJYGBXLLDLXPZJYZJYHHZCYWHJYLSJEXFSZZYWXKZJLUYDTMLYMQJPWXYHXSKTQJEZRPXXZHHMHWQPW"
            + "QLYJJQJJZSZCPHJLCHHNXJLQWZJHBMZYXBDHHYPZLHLHLGFWLCHYYTLHJXCJMSCPXSTKPNHQXSRTYXXTESYJCTLSSLSTDLLLWWYH"
            + "DHRJZSFGXTSYCZYNYHTDHWJSLHTZDQDJZXXQHGYLTZPHCSQFCLNJTCLZPFSTPDYNYLGMJLLYCQHYSSHCHYLHQYQTMZYPBYWRFQYK"
            + "QSYSLZDQJMPXYYSSRHZJNYWTQDFZBWWTWWRXCWHGYHXMKMYYYQMSMZHNGCEPMLQQMTCWCTMMPXJPJJHFXYYZSXZHTYBMSTSYJTTQ"
            + "QQYYLHYNPYQZLCYZHZWSMYLKFJXLWGXYPJYTYSYXYMZCKTTWLKSMZSYLMPWLZWXWQZSSAQSYXYRHSSNTSRAPXCPWCMGDXHXZDZYF"
            + "JHGZTTSBJHGYZSZYSMYCLLLXBTYXHBBZJKSSDMALXHYCFYGMQYPJYCQXJLLLJGSLZGQLYCJCCZOTYXMTMTTLLWTGPXYMZMKLPSZZ"
            + "ZXHKQYSXCTYJZYHXSHYXZKXLZWPSQPYHJWPJPWXQQYLXSDHMRSLZZYZWTTCYXYSZZSHBSCCSTPLWSSCJCHNLCGCHSSPHYLHFHHXJ"
            + "SXYLLNYLSZDHZXYLSXLWZYKCLDYAXZCMDDYSPJTQJZLNWQPSSSWCTSTSZLBLNXSMNYYMJQBQHRZWTYYDCHQLXKPZWBGQYBKFCMZW"
            + "PZLLYYLSZYDWHXPSBCMLJBSCGBHXLQHYRLJXYSWXWXZSLDFHLSLYNJLZYFLYJYCDRJLFSYZFSLLCQYQFGJYHYXZLYLMSTDJCYHBZ"
            + "LLNWLXXYGYYHSMGDHXXHHLZZJZXCZZZCYQZFNGWPYLCPKPYYPMCLQKDGXZGGWQBDXZZKZFBXXLZXJTPJPTTBYTSZZDWSLCHZHSLT"
            + "YXHQLHYXXXYYZYSWTXZKHLXZXZPYHGCHKCFSYHUTJRLXFJXPTZTWHPLYXFCRHXSHXKYXXYHZQDXQWULHYHMJTBFLKHTXCWHJFWJC"
            + "FPQRYQXCYYYQYGRPYWSGSUNGWCHKZDXYFLXXHJJBYZWTSXXNCYJJYMSWZJQRMHXZWFQSYLZJZGBHYNSLBGTTCSYBYXXWXYHXYYXN"
            + "SQYXMQYWRGYQLXBBZLJSYLPSYTJZYHYZAWLRORJMKSCZJXXXYXCHDYXRYXXJDTSQFXLYLTSFFYXLMTYJMJUYYYXLTZCSXQZQHZXL"
            + "YYXZHDNBRXXXJCTYHLBRLMBRLLAXKYLLLJLYXXLYCRYLCJTGJCMTLZLLCYZZPZPCYAWHJJFYBDYYZSMPCKZDQYQPBPCJPDCYZMDP"
            + "BCYYDYCNNPLMTMLRMFMMGWYZBSJGYGSMZQQQZTXMKQWGXLLPJGZBQCDJJJFPKJKCXBLJMSWMDTQJXLDLPPBXCWRCQFBFQJCZAHZG"
            + "MYKPHYYHZYKNDKZMBPJYXPXYHLFPNYYGXJDBKXNXHJMZJXSTRSTLDXSKZYSYBZXJLXYSLBZYSLHXJPFXPQNBYLLJQKYGZMCYZZYM"
            + "CCSLCLHZFWFWYXZMWSXTYNXJHPYYMCYSPMHYSMYDYSHQYZCHMJJMZCAAGCFJBBHPLYZYLXXSDJGXDHKXXTXXNBHRMLYJSLTXMRHN"
            + "LXQJXYZLLYSWQGDLBJHDCGJYQYCMHWFMJYBMBYJYJWYMDPWHXQLDYGPDFXXBCGJSPCKRSSYZJMSLBZZJFLJJJLGXZGYXYXLSZQYX"
            + "BEXYXHGCXBPLDYHWETTWWCJMBTXCHXYQXLLXFLYXLLJLSSFWDPZSMYJCLMWYTCZPCHQEKCQBWLCQYDPLQPPQZQFJQDJHYMMCXTXD"
            + "RMJWRHXCJZYLQXDYYNHYYHRSLSRSYWWZJYMTLTLLGTQCJZYABTCKZCJYCCQLJZQXALMZYHYWLWDXZXQDLLQSHGPJFJLJHJABCQZD"
            + "JGTKHSSTCYJLPSWZLXZXRWGLDLZRLZXTGSLLLLZLYXXWGDZYGBDPHZPBRLWSXQBPFDWOFMWHLYPCBJCCLDMBZPBZZLCYQXLDOMZB"
            + "LZWPDWYYGDSTTHCSQSCCRSSSYSLFYBFNTYJSZDFNDPDHDZZMBBLSLCMYFFGTJJQWFTMTPJWFNLBZCMMJTGBDZLQLPYFHYYMJYLSD"
            + "CHDZJWJCCTLJCLDTLJJCPDDSQDSSZYBNDBJLGGJZXSXNLYCYBJXQYCBYLZCFZPPGKCXZDZFZTJJFJSJXZBNZYJQTTYJYHTYCZHYM"
            + "DJXTTMPXSPLZCDWSLSHXYPZGTFMLCJTYCBPMGDKWYCYZCDSZZYHFLYCTYGWHKJYYLSJCXGYWJCBLLCSNDDBTZBSCLYZCZZSSQDLL"
            + "MQYYHFSLQLLXFTYHABXGWNYWYYPLLSDLDLLBJCYXJZMLHLJDXYYQYTDLLLBUGBFDFBBQJZZMDPJHGCLGMJJPGAEHHBWCQXAXHHHZ"
            + "CHXYPHJAXHLPHJPGPZJQCQZGJJZZUZDMQYYBZZPHYHYBWHAZYJHYKFGDPFQSDLZMLJXKXGALXZDAGLMDGXMWZQYXXDXXPFDMMSSY"
            + "MPFMDMMKXKSYZYSHDZKXSYSMMZZZMSYDNZZCZXFPLSTMZDNMXCKJMZTYYMZMZZMSXHHDCZJEMXXKLJSTLWLSQLYJZLLZJSSDPPMH"
            + "NLZJCZYHMXXHGZCJMDHXTKGRMXFWMCGMWKDTKSXQMMMFZZYDKMSCLCMPCGMHSPXQPZDSSLCXKYXTWLWJYAHZJGZQMCSNXYYMMPML"
            + "KJXMHLMLQMXCTKZMJQYSZJSYSZHSYJZJCDAJZYBSDQJZGWZQQXFKDMSDJLFWEHKZQKJPEYPZYSZCDWYJFFMZZYLTTDZZEFMZLBNP"
            + "PLPLPEPSZALLTYLKCKQZKGENQLWAGYXYDPXLHSXQQWQCQXQCLHYXXMLYCCWLYMQYSKGCHLCJNSZKPYZKCQZQLJPDMDZHLASXLBYD"
            + "WQLWDNBQCRYDDZTJYBKBWSZDXDTNPJDTCTQDFXQQMGNXECLTTBKPWSLCTYQLPWYZZKLPYGZCQQPLLKCCYLPQMZCZQCLJSLQZDJXL"
            + "DDHPZQDLJJXZQDXYZQKZLJCYQDYJPPYPQYKJYRMPCBYMCXKLLZLLFQPYLLLMBSGLCYSSLRSYSQTMXYXZQZFDZUYSYZTFFMZZSMZQ"
            + "HZSSCCMLYXWTPZGXZJGZGSJSGKDDHTQGGZLLBJDZLCBCHYXYZHZFYWXYZYMSDBZZYJGTSMTFXQYXQSTDGSLNXDLRYZZLRYYLXQHT"
            + "XSRTZNGZXBNQQZFMYKMZJBZYMKBPNLYZPBLMCNQYZZZSJZHJCTZKHYZZJRDYZHNPXGLFZTLKGJTCTSSYLLGZRZBBQZZKLPKLCZYS"
            + "SUYXBJFPNJZZXCDWXZYJXZZDJJKGGRSRJKMSMZJLSJYWQSKYHQJSXPJZZZLSNSHRNYPZTWCHKLPSRZLZXYJQXQKYSJYCZTLQZYBB"
            + "YBWZPQDWWYZCYTJCJXCKCWDKKZXSGKDZXWWYYJQYYTCYTDLLXWKCZKKLCCLZCQQDZLQLCSFQCHQHSFSMQZZLNBJJZBSJHTSZDYSJ"
            + "QJPDLZCDCWJKJZZLPYCGMZWDJJBSJQZSYZYHHXJPBJYDSSXDZNCGLQMBTSFSBPDZDLZNFGFJGFSMPXJQLMBLGQCYYXBQKDJJQYRF"
            + "KZTJDHCZKLBSDZCFJTPLLJGXHYXZCSSZZXSTJYGKGCKGYOQXJPLZPBPGTGYJZGHZQZZLBJLSQFZGKQQJZGYCZBZQTLDXRJXBSXXP"
            + "ZXHYZYCLWDXJJHXMFDZPFZHQHQMQGKSLYHTYCGFRZGNQXCLPDLBZCSCZQLLJBLHBZCYPZZPPDYMZZSGYHCKCPZJGSLJLNSCDSLDL"
            + "XBMSTLDDFJMKDJDHZLZXLSZQPQPGJLLYBDSZGQLBZLSLKYYHZTTNTJYQTZZPSZQZTLLJTYYLLQLLQYZQLBDZLSLYYZYMDFSZSNHL"
            + "XZNCZQZPBWSKRFBSYZMTHBLGJPMCZZLSTLXSHTCSYZLZBLFEQHLXFLCJLYLJQCBZLZJHHSSTBRMHXZHJZCLXFNBGXGTQJCZTMSFZ"
            + "KJMSSNXLJKBHSJXNTNLZDNTLMSJXGZJYJCZXYJYJWRWWQNZTNFJSZPZSHZJFYRDJSFSZJZBJFZQZZHZLXFYSBZQLZSGYFTZDCSZX"
            + "ZJBQMSZKJRHYJZCKMJKHCHGTXKXQGLXPXFXTRTYLXJXHDTSJXHJZJXZWZLCQSBTXWXGXTXXHXFTSDKFJHZYJFJXRZSDLLLTQSQQZ"
            + "QWZXSYQTWGWBZCGZLLYZBCLMQQTZHZXZXLJFRMYZFLXYSQXXJKXRMQDZDMMYYBSQBHGZMWFWXGMXLZPYYTGZYCCDXYZXYWGSYJYZ"
            + "NBHPZJSQSYXSXRTFYZGRHZTXSZZTHCBFCLSYXZLZQMZLMPLMXZJXSFLBYZMYQHXJSXRXSQZZZSSLYFRCZJRCRXHHZXQYDYHXSJJH"
            + "ZCXZBTYNSYSXJBQLPXZQPYMLXZKYXLXCJLCYSXXZZLXDLLLJJYHZXGYJWKJRWYHCPSGNRZLFZWFZZNSXGXFLZSXZZZBFCSYJDBRJ"
            + "KRDHHGXJLJJTGXJXXSTJTJXLYXQFCSGSWMSBCTLQZZWLZZKXJMLTMJYHSDDBXGZHDLBMYJFRZFSGCLYJBPMLYSMSXLSZJQQHJZFX"
            + "GFQFQBPXZGYYQXGZTCQWYLTLGWSGWHRLFSFGZJMGMGBGTJFSYZZGZYZAFLSSPMLPFLCWBJZCLJJMZLPJJLYMQDMYYYFBGYGYZMLY"
            + "ZDXQYXRQQQHSYYYQXYLJTYXFSFSLLGNQCYHYCWFHCCCFXPYLYPLLZYXXXXXKQHHXSHJZCFZSCZJXCPZWHHHHHAPYLQALPQAFYHXD"
            + "YLUKMZQGGGDDESRNNZLTZGCHYPPYSQJJHCLLJTOLNJPZLJLHYMHEYDYDSQYCDDHGZUNDZCLZYZLLZNTNYZGSLHSLPJJBDGWXPCDU"
            + "TJCKLKCLWKLLCASSTKZZDNQNTTLYYZSSYSSZZRYLJQKCQDHHCRXRZYDGRGCWCGZQFFFPPJFZYNAKRGYWYQPQXXFKJTSZZXSWZDDF"
            + "BBXTBGTZKZNPZZPZXZPJSZBMQHKCYXYLDKLJNYPKYGHGDZJXXEAHPNZKZTZCMXCXMMJXNKSZQNMNLWBWWXJKYHCPSTMCSQTZJYXT"
            + "PCTPDTNNPGLLLZSJLSPBLPLQHDTNJNLYYRSZFFJFQWDPHZDWMRZCCLODAXNSSNYZRESTYJWJYJDBCFXNMWTTBYLWSTSZGYBLJPXG"
            + "LBOCLHPCBJLTMXZLJYLZXCLTPNCLCKXTPZJSWCYXSFYSZDKNTLBYJCYJLLSTGQCBXRYZXBXKLYLHZLQZLNZCXWJZLJZJNCJHXMNZ"
            + "ZGJZZXTZJXYCYYCXXJYYXJJXSSSJSTSSTTPPGQTCSXWZDCSYFPTFBFHFBBLZJCLZZDBXGCXLQPXKFZFLSYLTUWBMQJHSZBMDDBCY"
            + "SCCLDXYCDDQLYJJWMQLLCSGLJJSYFPYYCCYLTJANTJJPWYCMMGQYYSXDXQMZHSZXPFTWWZQSWQRFKJLZJQQYFBRXJHHFWJJZYQAZ"
            + "MYFRHCYYBYQWLPEXCCZSTYRLTTDMQLYKMBBGMYYJPRKZNPBSXYXBHYZDJDNGHPMFSGMWFZMFQMMBCMZZCJJLCNUXYQLMLRYGQZCY"
            + "XZLWJGCJCGGMCJNFYZZJHYCPRRCMTZQZXHFQGTJXCCJEAQCRJYHPLQLSZDJRBCQHQDYRHYLYXJSYMHZYDWLDFRYHBPYDTSSCNWBX"
            + "GLPZMLZZTQSSCPJMXXYCSJYTYCGHYCJWYRXXLFEMWJNMKLLSWTXHYYYNCMMCWJDQDJZGLLJWJRKHPZGGFLCCSCZMCBLTBHBQJXQD"
            + "SPDJZZGKGLFQYWBZYZJLTSTDHQHCTCBCHFLQMPWDSHYYTQWCNZZJTLBYMBPDYYYXSQKXWYYFLXXNCWCXYPMAELYKKJMZZZBRXYYQ"
            + "JFLJPFHHHYTZZXSGQQMHSPGDZQWBWPJHZJDYSCQWZKTXXSQLZYYMYSDZGRXCKKUJLWPYSYSCSYZLRMLQSYLJXBCXTLWDQZPCYCYK"
            + "PPPNSXFYZJJRCEMHSZMSXLXGLRWGCSTLRSXBZGBZGZTCPLUJLSLYLYMTXMTZPALZXPXJTJWTCYYZLBLXBZLQMYLXPGHDSLSSDMXM"
            + "BDZZSXWHAMLCZCPJMCNHJYSNSYGCHSKQMZZQDLLKABLWJXSFMOCDXJRRLYQZKJMYBYQLYHETFJZFRFKSRYXFJTWDSXXSYSQJYSLY"
            + "XWJHSNLXYYXHBHAWHHJZXWMYLJCSSLKYDZTXBZSYFDXGXZJKHSXXYBSSXDPYNZWRPTQZCZENYGCXQFJYKJBZMLJCMQQXUOXSLYXX"
            + "LYLLJDZBTYMHPFSTTQQWLHOKYBLZZALZXQLHZWRRQHLSTMYPYXJJXMQSJFNBXYXYJXXYQYLTHYLQYFMLKLJTMLLHSZWKZHLJMLHL"
            + "JKLJSTLQXYLMBHHLNLZXQJHXCFXXLHYHJJGBYZZKBXSCQDJQDSUJZYYHZHHMGSXCSYMXFEBCQWWRBPYYJQTYZCYQYQQZYHMWFFHG"
            + "ZFRJFCDPXNTQYZPDYKHJLFRZXPPXZDBBGZQSTLGDGYLCQMLCHHMFYWLZYXKJLYPQHSYWMQQGQZMLZJNSQXJQSYJYCBEHSXFSZPXZ"
            + "WFLLBCYYJDYTDTHWZSFJMQQYJLMQXXLLDTTKHHYBFPWTYYSQQWNQWLGWDEBZWCMYGCULKJXTMXMYJSXHYBRWFYMWFRXYQMXYSZTZ"
            + "ZTFYKMLDHQDXWYYNLCRYJBLPSXCXYWLSPRRJWXHQYPHTYDNXHHMMYWYTZCSQMTSSCCDALWZTCPQPYJLLQZYJSWXMZZMMYLMXCLMX"
            + "CZMXMZSQTZPPQQBLPGXQZHFLJJHYTJSRXWZXSCCDLXTYJDCQJXSLQYCLZXLZZXMXQRJMHRHZJBHMFLJLMLCLQNLDXZLLLPYPSYJY"
            + "SXCQQDCMQJZZXHNPNXZMEKMXHYKYQLXSXTXJYYHWDCWDZHQYYBGYBCYSCFGPSJNZDYZZJZXRZRQJJYMCANYRJTLDPPYZBSTJKXXZ"
            + "YPFDWFGZZRPYMTNGXZQBYXNBUFNQKRJQZMJEGRZGYCLKXZDSKKNSXKCLJSPJYYZLQQJYBZSSQLLLKJXTBKTYLCCDDBLSPPFYLGYD"
            + "TZJYQGGKQTTFZXBDKTYYHYBBFYTYYBCLPDYTGDHRYRNJSPTCSNYJQHKLLLZSLYDXXWBCJQSPXBPJZJCJDZFFXXBRMLAZHCSNDLBJ"
            + "DSZBLPRZTSWSBXBCLLXXLZDJZSJPYLYXXYFTFFFBHJJXGBYXJPMMMPSSJZJMTLYZJXSWXTYLEDQPJMYGQZJGDJLQJWJQLLSJGJGY"
            + "GMSCLJJXDTYGJQJQJCJZCJGDZZSXQGSJGGCXHQXSNQLZZBXHSGZXCXYLJXYXYYDFQQJHJFXDHCTXJYRXYSQTJXYEFYYSSYYJXNCY"
            + "ZXFXMSYSZXYYSCHSHXZZZGZZZGFJDLTYLNPZGYJYZYYQZPBXQBDZTZCZYXXYHHSQXSHDHGQHJHGYWSZTMZMLHYXGEBTYLZKQWYTJ"
            + "ZRCLEKYSTDBCYKQQSAYXCJXWWGSBHJYZYDHCSJKQCXSWXFLTYNYZPZCCZJQTZWJQDZZZQZLJJXLSBHPYXXPSXSHHEZTXFPTLQYZZ"
            + "XHYTXNCFZYYHXGNXMYWXTZSJPTHHGYMXMXQZXTSBCZYJYXXTYYZYPCQLMMSZMJZZLLZXGXZAAJZYXJMZXWDXZSXZDZXLEYJJZQBH"
            + "ZWZZZQTZPSXZTDSXJJJZNYAZPHXYYSRNQDTHZHYYKYJHDZXZLSWCLYBZYECWCYCRYLCXNHZYDZYDYJDFRJJHTRSQTXYXJRJHOJYN"
            + "XELXSFSFJZGHPZSXZSZDZCQZBYYKLSGSJHCZSHDGQGXYZGXCHXZJWYQWGYHKSSEQZZNDZFKWYSSTCLZSTSYMCDHJXXYWEYXCZAYD"
            + "MPXMDSXYBSQMJMZJMTZQLPJYQZCGQHXJHHLXXHLHDLDJQCLDWBSXFZZYYSCHTYTYYBHECXHYKGJPXHHYZJFXHWHBDZFYZBCAPNPG"
            + "NYDMSXHMMMMAMYNBYJTMPXYYMCTHJBZYFCGTYHWPHFTWZZEZSBZEGPFMTSKFTYCMHFLLHGPZJXZJGZJYXZSBBQSCZZLZCCSTPGXM"
            + "JSFTCCZJZDJXCYBZLFCJSYZFGSZLYBCWZZBYZDZYPSWYJZXZBDSYUXLZZBZFYGCZXBZHZFTPBGZGEJBSTGKDMFHYZZJHZLLZZGJQ"
            + "ZLSFDJSSCBZGPDLFZFZSZYZYZSYGCXSNXXCHCZXTZZLJFZGQSQYXZJQDCCZTQCDXZJYQJQCHXZTDLGSCXZSYQJQTZWLQDQZTQCHQ"
            + "QJZYEZZZPBWKDJFCJPZTYPQYQTTYNLMBDKTJZPQZQZZFPZSBNJLGYJDXJDZZKZGQKXDLPZJTCJDQBXDJQJSTCKNXBXZMSLYJCQMT"
            + "JQWWCJQNJNLLLHJCWQTBZQYDZCZPZZDZYDDCYZZZCCJTTJFZDPRRTZTJDCQTQZDTJNPLZBCLLCTZSXKJZQZPZLBZRBTJDCXFCZDB"
            + "CCJJLTQQPLDCGZDBBZJCQDCJWYNLLZYZCCDWLLXWZLXRXNTQQCZXKQLSGDFQTDDGLRLAJJTKUYMKQLLTZYTDYYCZGJWYXDXFRSKS"
            + "TQTENQMRKQZHHQKDLDAZFKYPBGGPZREBZZYKZZSPEGJXGYKQZZZSLYSYYYZWFQZYLZZLZHWCHKYPQGNPGBLPLRRJYXCCSYYHSFZF"
            + "YBZYYTGZXYLXCZWXXZJZBLFFLGSKHYJZEYJHLPLLLLCZGXDRZELRHGKLZZYHZLYQSZZJZQLJZFLNBHGWLCZCFJYSPYXZLZLXGCCP"
            + "ZBLLCYBBBBUBBCBPCRNNZCZYRBFSRLDCGQYYQXYGMQZWTZYTYJXYFWTEHZZJYWLCCNTZYJJZDEDPZDZTSYQJHDYMBJNYJZLXTSST"
            + "PHNDJXXBYXQTZQDDTJTDYYTGWSCSZQFLSHLGLBCZPHDLYZJYCKWTYTYLBNYTSDSYCCTYSZYYEBHEXHQDTWNYGYCLXTSZYSTQMYGZ"
            + "AZCCSZZDSLZCLZRQXYYELJSBYMXSXZTEMBBLLYYLLYTDQYSHYMRQWKFKBFXNXSBYCHXBWJYHTQBPBSBWDZYLKGZSKYHXQZJXHXJX"
            + "GNLJKZLYYCDXLFYFGHLJGJYBXQLYBXQPQGZTZPLNCYPXDJYQYDYMRBESJYYHKXXSTMXRCZZYWXYQYBMCLLYZHQYZWQXDBXBZWZMS"
            + "LPDMYSKFMZKLZCYQYCZLQXFZZYDQZPZYGYJYZMZXDZFYFYTTQTZHGSPCZMLCCYTZXJCYTJMKSLPZHYSNZLLYTPZCTZZCKTXDHXXT"
            + "QCYFKSMQCCYYAZHTJPCYLZLYJBJXTPNYLJYYNRXSYLMMNXJSMYBCSYSYLZYLXJJQYLDZLPQBFZZBLFNDXQKCZFYWHGQMRDSXYCYT"
            + "XNQQJZYYPFZXDYZFPRXEJDGYQBXRCNFYYQPGHYJDYZXGRHTKYLNWDZNTSMPKLBTHBPYSZBZTJZSZZJTYYXZPHSSZZBZCZPTQFZMY"
            + "FLYPYBBJQXZMXXDJMTSYSKKBJZXHJCKLPSMKYJZCXTMLJYXRZZQSLXXQPYZXMKYXXXJCLJPRMYYGADYSKQLSNDHYZKQXZYZTCGHZ"
            + "TLMLWZYBWSYCTBHJHJFCWZTXWYTKZLXQSHLYJZJXTMPLPYCGLTBZZTLZJCYJGDTCLKLPLLQPJMZPAPXYZLKKTKDZCZZBNZDYDYQZ"
            + "JYJGMCTXLTGXSZLMLHBGLKFWNWZHDXUHLFMKYSLGXDTWWFRJEJZTZHYDXYKSHWFZCQSHKTMQQHTZHYMJDJSKHXZJZBZZXYMPAGQM"
            + "STPXLSKLZYNWRTSQLSZBPSPSGZWYHTLKSSSWHZZLYYTNXJGMJSZSUFWNLSOZTXGXLSAMMLBWLDSZYLAKQCQCTMYCFJBSLXCLZZCL"
            + "XXKSBZQCLHJPSQPLSXXCKSLNHPSFQQYTXYJZLQLDXZQJZDYYDJNZPTUZDSKJFSLJHYLZSQZLBTXYDGTQFDBYAZXDZHZJNHHQBYKN"
            + "XJJQCZMLLJZKSPLDYCLBBLXKLELXJLBQYCXJXGCNLCQPLZLZYJTZLJGYZDZPLTQCSXFDMNYCXGBTJDCZNBGBQYQJWGKFHTNPYQZQ"
            + "GBKPBBYZMTJDYTBLSQMPSXTBNPDXKLEMYYCJYNZCTLDYKZZXDDXHQSHDGMZSJYCCTAYRZLPYLTLKXSLZCGGEXCLFXLKJRTLQJAQZ"
            + "NCMBYDKKCXGLCZJZXJHPTDJJMZQYKQSECQZDSHHADMLZFMMZBGNTJNNLGBYJBRBTMLBYJDZXLCJLPLDLPCQDHLXZLYCBLCXZZJAD"
            + "JLNZMMSSSMYBHBSQKBHRSXXJMXSDZNZPXLGBRHWGGFCXGMSKLLTSJYYCQLTSKYWYYHYWXBXQYWPYWYKQLSQPTNTKHQCWDQKTWPXX"
            + "HCPTHTWUMSSYHBWCRWXHJMKMZNGWTMLKFGHKJYLSYYCXWHYECLQHKQHTTQKHFZLDXQWYZYYDESBPKYRZPJFYYZJCEQDZZDLATZBB"
            + "FJLLCXDLMJSSXEGYGSJQXCWBXSSZPDYZCXDNYXPPZYDLYJCZPLTXLSXYZYRXCYYYDYLWWNZSAHJSYQYHGYWWAXTJZDAXYSRLTDPS"
            + "SYYFNEJDXYZHLXLLLZQZSJNYQYQQXYJGHZGZCYJCHZLYCDSHWSHJZYJXCLLNXZJJYYXNFXMWFPYLCYLLABWDDHWDXJMCXZTZPMLQ"
            + "ZHSFHZYNZTLLDYWLSLXHYMMYLMBWWKYXYADTXYLLDJPYBPWUXJMWMLLSAFDLLYFLBHHHBQQLTZJCQJLDJTFFKMMMBYTHYGDCQRDD"
            + "WRQJXNBYSNWZDBYYTBJHPYBYTTJXAAHGQDQTMYSTQXKBTZPKJLZRBEQQSSMJJBDJOTGTBXPGBKTLHQXJJJCTHXQDWJLWRFWQGWSH"
            + "CKRYSWGFTGYGBXSDWDWRFHWYTJJXXXJYZYSLPYYYPAYXHYDQKXSHXYXGSKQHYWFDDDPPLCJLQQEEWXKSYYKDYPLTJTHKJLTCYYHH"
            + "JTTPLTZZCDLTHQKZXQYSTEEYWYYZYXXYYSTTJKLLPZMCYHQGXYHSRMBXPLLNQYDQHXSXXWGDQBSHYLLPJJJTHYJKYPPTHYYKTYEZ"
            + "YENMDSHLCRPQFDGFXZPSFTLJXXJBSWYYSKSFLXLPPLBBBLBSFXFYZBSJSSYLPBBFFFFSSCJDSTZSXZRYYSYFFSYZYZBJTBCTSBSD"
            + "HRTJJBYTCXYJEYLXCBNEBJDSYXYKGSJZBXBYTFZWGENYHHTHZHHXFWGCSTBGXKLSXYWMTMBYXJSTZSCDYQRCYTWXZFHMYMCXLZNS"
            + "DJTTTXRYCFYJSBSDYERXJLJXBBDEYNJGHXGCKGSCYMBLXJMSZNSKGXFBNBPTHFJAAFXYXFPXMYPQDTZCXZZPXRSYWZDLYBBKTYQP"
            + "QJPZYPZJZNJPZJLZZFYSBTTSLMPTZRTDXQSJEHBZYLZDHLJSQMLHTXTJECXSLZZSPKTLZKQQYFSYGYWPCPQFHQHYTQXZKRSGTTSQ"
            + "CZLPTXCDYYZXSQZSLXLZMYCPCQBZYXHBSXLZDLTCDXTYLZJYYZPZYZLTXJSJXHLPMYTXCQRBLZSSFJZZTNJYTXMYJHLHPPLCYXQJ"
            + "QQKZZSCPZKSWALQSBLCCZJSXGWWWYGYKTJBBZTDKHXHKGTGPBKQYSLPXPJCKBMLLXDZSTBKLGGQKQLSBKKTFXRMDKBFTPZFRTBBR"
            + "FERQGXYJPZSSTLBZTPSZQZSJDHLJQLZBPMSMMSXLQQNHKNBLRDDNXXDHDDJCYYGYLXGZLXSYGMQQGKHBPMXYXLYTQWLWGCPBMQXC"
            + "YZYDRJBHTDJYHQSHTMJSBYPLWHLZFFNYPMHXXHPLTBQPFBJWQDBYGPNZTPFZJGSDDTQSHZEAWZZYLLTYYBWJKXXGHLFKXDJTMSZS"
            + "QYNZGGSWQSPHTLSSKMCLZXYSZQZXNCJDQGZDLFNYKLJCJLLZLMZZNHYDSSHTHZZLZZBBHQZWWYCRZHLYQQJBEYFXXXWHSRXWQHWP"
            + "SLMSSKZTTYGYQQWRSLALHMJTQJSMXQBJJZJXZYZKXBYQXBJXSHZTSFJLXMXZXFGHKZSZGGYLCLSARJYHSLLLMZXELGLXYDJYTLFB"
            + "HBPNLYZFBBHPTGJKWETZHKJJXZXXGLLJLSTGSHJJYQLQZFKCGNNDJSSZFDBCTWWSEQFHQJBSAQTGYPQLBXBMMYWXGSLZHGLZGQYF"
            + "LZBYFZJFRYSFMBYZHQGFWZSYFYJJPHZBYYZFFWODGRLMFTWLBZGYCQXCDJYGZYYYYTYTYDWEGAZYHXJLZYYHLRMGRXXZCLHNELJJ"
            + "TJTPWJYBJJBXJJTJTEEKHWSLJPLPSFYZPQQBDLQJJTYYQLYZKDKSQJYYQZLDQTGJQYZJSUCMRYQTHTEJMFCTYHYPKMHYZWJDQFHY"
            + "YXWSHCTXRLJHQXHCCYYYJLTKTTYTMXGTCJTZAYYOCZLYLBSZYWJYTSJYHBYSHFJLYGJXXTMZYYLTXXYPZLXYJZYZYYPNHMYMDYYL"
            + "BLHLSYYQQLLNJJYMSOYQBZGDLYXYLCQYXTSZEGXHZGLHWBLJHEYXTWQMAKBPQCGYSHHEGQCMWYYWLJYJHYYZLLJJYLHZYHMGSLJL"
            + "JXCJJYCLYCJPCPZJZJMMYLCQLNQLJQJSXYJMLSZLJQLYCMMHCFMMFPQQMFYLQMCFFQMMMMHMZNFHHJGTTHHKHSLNCHHYQDXTMMQD"
            + "CYZYXYQMYQYLTDCYYYZAZZCYMZYDLZFFFMMYCQZWZZMABTBYZTDMNZZGGDFTYPCGQYTTSSFFWFDTZQSSYSTWXJHXYTSXXYLBYQHW"
            + "WKXHZXWZNNZZJZJJQJCCCHYYXBZXZCYZTLLCQXYNJYCYYCYNZZQYYYEWYCZDCJYCCHYJLBTZYYCQWMPWPYMLGKDLDLGKQQBGYCHJ"
            + "XY";

        /// <summary>
        /// 获得一个字符串的大写汉语拼音码
        /// </summary>
        /// <param name="strText">字符串</param>
        /// <returns>汉语拼音码,该字符串只包含大写的英文字母</returns>
        public static string GetChineseUpperSpell(string strText)
        {
            if (strText == null || strText.Length == 0)
                return strText;
            System.Text.StringBuilder myStr = new System.Text.StringBuilder();
            int index = 0;
            foreach (char vChar in strText)
            {
                // 若是字母则直接输出
                if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))
                    myStr.Append(char.ToUpper(vChar));
                else
                {
                    index = (int)vChar - 19968;
                    if (index >= 0 && index < strChineseFirstPY.Length)
                        myStr.Append(strChineseFirstPY[index]);
                }
            }//foreach
            return myStr.ToString();
        }// public static string GetChineseSpell( string strText)

        /// <summary>
        /// 获得一个字符串的小写写汉语拼音码
        /// </summary>
        /// <param name="strText">字符串</param>
        /// <returns>汉语拼音码,该字符串只包含小写写的英文字母</returns>
        public static string GetChineseLowerSpell(string strText)
        {
            return GetChineseUpperSpell(strText).ToLower();
        }

        /// <summary>
        /// 清除一个字符串中的空白字符
        /// </summary>
        /// <param name="strText">原始字符串</param>
        /// <param name="intMaxLength">输出结果的最长长度,为0表示无限制</param>
        /// <param name="bolHtml">是否模仿HTML对空白字符的处理</param>
        /// <returns>没有空白字符的字符串</returns>
        public static string ClearWhiteSpace(string strText, int intMaxLength, bool bolHtml)
        {
            if (strText == null)
                return null;
            else
            {
                bool bolPreIsWhiteSpace = false;
                System.Text.StringBuilder myStr = new System.Text.StringBuilder();
                int iCount = 0;
                foreach (char vChar in strText)
                {
                    if (char.IsWhiteSpace(vChar))
                        bolPreIsWhiteSpace = true;
                    else
                    {
                        if (bolHtml && bolPreIsWhiteSpace == true)
                        {
                            myStr.Append(" ");
                        }
                        myStr.Append(vChar);
                        if (intMaxLength > 0)
                        {
                            iCount++;
                            if (iCount > intMaxLength)
                                break;
                        }

                        bolPreIsWhiteSpace = false;
                    }
                }
                return myStr.ToString();
            }
        }

        /// <summary>
        /// 根据一个BASE64的字符串加载一个图片对象
        /// </summary>
        /// <param name="strBase64">Base54字符串</param>
        /// <returns>创建的图片对象,若发生错误则返回空引用</returns>
        public static System.Drawing.Image ImageFromBase64String(string strBase64)
        {
            try
            {
                byte[] bytBuf = Convert.FromBase64String(strBase64);
                System.IO.MemoryStream myStream = new System.IO.MemoryStream(bytBuf);
                System.Drawing.Image myImg = System.Drawing.Image.FromStream(myStream);
                myStream.Close();
                return myImg;
            }
            catch
            { }
            return null;
        }

        /// <summary>
        /// 将一个图片对象按照指定的图片格式保存到一个Base64字符串
        /// </summary>
        /// <param name="myImage">图片对象</param>
        /// <param name="format">图片格式,默认为PNG格式</param>
        /// <returns>Base64字符串</returns>
        public static string ImageToBase64String(System.Drawing.Image myImage, System.Drawing.Imaging.ImageFormat format)
        {
            if (myImage == null)
                return null;
            if (format == null)
                format = System.Drawing.Imaging.ImageFormat.Png;
            System.IO.MemoryStream myStream = new System.IO.MemoryStream();
            myImage.Save(myStream, format);
            byte[] bytBuf = myStream.ToArray();
            myStream.Close();
            return Convert.ToBase64String(bytBuf);
        }

        /// <summary>
        /// 判断一个字符串是否表示一个 http 的 URL 
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <returns>是否是HTTP的URL</returns>
        public static bool isHttpURL(string strData)
        {
            if (strData != null)
            {
                strData = strData.Trim().ToLower();
                return strData.StartsWith("http://");
            }
            return false;
        }

        /// <summary>
        /// 将 #xxxxxx 字符串转换为一个颜色值
        /// </summary>
        /// <param name="strText">#xxxxxx 格式的字符串</param>
        /// <param name="DefaultValue">若转换失败则使用的默认值</param> 
        /// <returns>转换结果</returns>
        public static System.Drawing.Color ColorFromHtml(string strText, System.Drawing.Color DefaultValue)
        {
            if (strText != null)
            {
                strText = strText.ToUpper().Trim();
                if (strText.StartsWith("#") && strText.Length <= 7)
                {
                    int iValue = 0;
                    int Index = 0;
                    const string c_HexList = "0123456789ABCDEF";
                    for (int iCount = 1; iCount < strText.Length; iCount++)
                    {
                        Index = c_HexList.IndexOf(strText[iCount]);
                        if (Index >= 0)
                            iValue = iValue * 16 + Index;
                        else
                            return DefaultValue;
                    }
                    System.Drawing.Color myColor = System.Drawing.Color.FromArgb(iValue);
                    return System.Drawing.Color.FromArgb(255, myColor);
                }
                else
                {
                    try
                    {
                        return System.Drawing.Color.FromArgb(Convert.ToInt32(strText));
                    }
                    catch
                    {
                        return DefaultValue;
                    }
                }
            }
            return DefaultValue;
        }

        /// <summary>
        /// 将一个颜色值转换为 #XXXXXX 格式的字符串
        /// </summary>
        /// <param name="intValue">整数值</param>
        /// <returns>转换后的字符串</returns>
        public static string ColorToHtml(System.Drawing.Color myColor)
        {
            return "#" + Convert.ToInt32(myColor.ToArgb() & 0xffffff).ToString("X6");
        }

        /// <summary>
        /// 清除一段文本中所有的空白行
        /// </summary>
        /// <param name="strData">文本</param>
        /// <returns>处理后的文本</returns>
        public static string ClearBlankLine(string strData)
        {
            if (strData == null)
                return null;
            else
            {
                System.IO.StringReader myReader = new System.IO.StringReader(strData);
                System.Text.StringBuilder myStr = new System.Text.StringBuilder();
                string strLine = myReader.ReadLine();
                bool bolFirst = true;
                while (strLine != null)
                {
                    foreach (System.Char myChr in strLine)
                    {
                        if (System.Char.IsWhiteSpace(myChr) == false)
                        {
                            if (!bolFirst)
                                myStr.Append("\r\n");
                            myStr.Append(strLine);
                            bolFirst = false;
                            break;
                        }
                    }
                    strLine = myReader.ReadLine();
                }
                myReader.Close();
                return myStr.ToString();
            }
        }
        ///// <summary>
        ///// 将HTML代码转换为纯文本
        ///// </summary>
        ///// <param name="strHTML">HTML代码</param>
        ///// <returns>纯文本</returns>
        //public static string HTMLToText(string strHTML)
        //{
        //    if (strHTML != null)
        //    {
        //        return System.Web.HttpUtility.HtmlDecode(strHTML);
        //    }
        //    return null;
        //}

        /// <summary>
        /// 将一个纯文本转换为一个XML字符串
        /// </summary>
        /// <param name="strData">纯文本</param>
        /// <returns>XML字符串</returns>
        public static string ToXMLString(string strData)
        {
            if (strData != null)
            {
                if (strData.IndexOf('\"') >= 0)
                    strData = strData.Replace("\"", "&quot;");
                if (strData.IndexOf('>') >= 0)
                    strData = strData.Replace(">", "&gt;");
                if (strData.IndexOf('<') >= 0)
                    strData = strData.Replace("<", "&lt;");
                return strData;
            }
            else
                return "";
        }

        #region 进行数据格式转换处理***************************************************************
        /// <summary>
        /// 将yyyyMMddHHmmss 格式的字符串转化为时间数据
        /// </summary>
        /// <param name="strData">原始字符串</param>
        /// <param name="DefaultValue">默认值</param>
        /// <returns>转换后的时间数据</returns>
        public static System.DateTime ToDBDateTime(string strData, System.DateTime DefaultValue)
        {
            try
            {
                if (strData == null)
                    return DefaultValue;
                else
                {
                    strData = strData.PadRight(14, '0');
                    return System.DateTime.Parse("yyyyMMddhhmmss");
                }
            }
            catch
            {
                return DefaultValue;
            }
        }
        /// <summary>
        /// 将一个字符串转换为整数
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <param name="DefaultValue">默认值</param>
        /// <returns>转换结果</returns>
        public static int ToInt32Value(string strData, int DefaultValue)
        {
            try
            {
                if (strData == null || strData.Length == 0)
                {
                    return DefaultValue;
                }

                return Convert.ToInt32(strData);
            }
            catch
            {
                return DefaultValue;
            }
        }

        /// <summary>
        /// 将一个对象转换为字符串
        /// </summary>
        /// <param name="obj">对象</param>
        /// <param name="DefaultValue">默认值</param>
        /// <returns>字符串</returns>
        public static string ToStringValue(object obj, string DefaultValue)
        {
            try
            {
                return Convert.ToString(obj);
            }
            catch
            {
                return DefaultValue;
            }
        }

        /// <summary>
        /// 将一个字符串转换为布尔类型的值
        /// </summary>
        /// <param name="strData">待处理的字符串</param>
        /// <param name="DefaultValue">若转换失败则返回的默认值</param>
        /// <returns>转换结果</returns>
        public static bool ToBoolValue(string strData, bool DefaultValue)
        {
            try
            {
                if (strData == null)
                    return DefaultValue;
                else
                    return Convert.ToBoolean(strData);
            }
            catch
            {
                return DefaultValue;
            }
        }
        #endregion

        /// <summary>
        /// 找到指定字符串中一组字符出现的第一个序号
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <param name="strFind">所有需要查找的字符组成的字符串</param>
        /// <returns>第一次出现字符的序号,若未找到则返回-1</returns>
        public static int IndexofEx(string strData, string strFind)
        {
            int Result = -1;
            int Index = 0;
            if (strData != null && strFind != null)
            {
                for (int iCount = 0; iCount < strFind.Length; iCount++)
                {
                    Index = strData.IndexOf(strFind[iCount]);
                    if (Index < Result || Result == -1)
                        Result = Index;
                }
            }
            return Result;
        }

        /// <summary>
        /// 找到第一次出现空白字符的位置
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <returns>第一次出现空白字符的位置,若未找到则返回字符的长度</returns>
        public static int IndexofWiteSpace(string strData)
        {
            for (int iCount = 0; iCount < strData.Length; iCount++)
            {
                if (Char.IsWhiteSpace(strData, iCount))
                    return iCount;
            }
            return strData.Length;
        }

        /// <summary>
        /// 找到第一次出现空白字符的位置
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <param name="StartIndex">开始查找的起始位置</param>
        /// <returns>第一次出现空白字符的位置,若未找到则返回字符的长度</returns>
        public static int IndexofWiteSpace(string strData, int StartIndex)
        {
            if (StartIndex < 0 || StartIndex >= strData.Length)
                StartIndex = 0;
            for (int iCount = StartIndex; iCount < strData.Length; iCount++)
            {
                if (Char.IsWhiteSpace(strData, iCount))
                    return iCount;
            }
            return strData.Length;
        }

        /// <summary>
        /// 判断一个字符串是否全部由数字字符组成
        /// </summary>
        /// <param name="strData">要测试的字符串</param>
        /// <returns>若全部由数字字符组成则返回true 否则返回false ，字符串对象为空时也返回false</returns>
        public static bool isInteger(string strData)
        {
            if (strData != null)
            {
                foreach (char myChar in strData)
                    if (Char.IsNumber(myChar) == false)
                        return false;
                return true;
            }
            return false;
        }

        /// <summary>
        /// 判断一个字符串对象是否是空字符串
        /// </summary>
        /// <param name="strData">字符串</param>
        /// <returns>若字符串为空或者全部有空白字符组成则返回True,否则返回false</returns>
        public static bool isBlankString(string strData)
        {
            if (strData == null)
                return true;
            else
            {
                for (int iCount = 0; iCount < strData.Length; iCount++)
                {
                    if (Char.IsWhiteSpace(strData[iCount]) == false)
                        return false;
                }
                return true;
            }
        }//public static bool isBlankString()

        /// <summary>
        /// 判断一个字符串是否有内容,本函数和isBlankString相反
        /// </summary>
        /// <param name="strData">字符串对象</param>
        /// <returns>若字符串不为空且存在非空白字符则返回True 否则返回False</returns>
        public static bool HasContent(string strData)
        {
            if (strData != null && strData.Length > 0)
            {
                foreach (char c in strData)
                {
                    if (Char.IsWhiteSpace(c) == false)
                        return true;
                }
            }
            return false;
        }// bool HasContent()

        /// <summary>
        /// 在XML字符串外面加上XSLT文档框架
        /// </summary>
        /// <param name="strXML">XML字符串</param>
        /// <returns>输出的XSLT字符串</returns>
        public static string TransToXSLFrame(string strXML)
        {
            return "<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"><xsl:template match=\"/*\">" + strXML + "</xsl:template></xsl:stylesheet>";
        }


        /// <summary>
        /// 测试一个字符串中所有的字符都是字母或者数字
        /// </summary>
        /// <param name="strData">供测试的字符串</param>
        /// <returns>若字符串所有字符都是字母或数字则返回true ,否则返回 false</returns>
        public static bool IsLetterOrDigit(string strData)
        {
            if (strData != null)
            {
                for (int iCount = 0; iCount < strData.Length; iCount++)
                {
                    if (System.Char.IsLetterOrDigit(strData, iCount) == false)
                        return false;
                }
                return true;
            }
            else
                return false;
        }

        /// <summary>
        /// 判断一个字符串是否全部是由数字字符组成
        /// </summary>
        /// <param name="strData">共测试的字符串</param>
        /// <returns>若字符串中所有字符未数字则返回true,否则返回false</returns>
        //public static bool IsInteger(string strData)
        //{
        //    if (strData != null)
        //    {
        //        foreach (char myChar in strData)
        //            if (System.Char.IsNumber(myChar) == false)
        //                return false;
        //        return true;
        //    }
        //    return false;
        //}

        /// <summary>
        /// 根据指定字符串计算MD5数值的16进制字符串
        /// </summary>
        /// <param name="strData">字符串数据</param>
        /// <returns>大写的MD5的16进制字符串</returns>
        public static string GetMD5String(string strData)
        {
            System.Security.Cryptography.MD5CryptoServiceProvider myMD5 = new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] bytBuf = System.Text.Encoding.Unicode.GetBytes(strData);
            byte[] md5 = myMD5.ComputeHash(bytBuf, 0, bytBuf.Length);
            return ByteToHex(md5);
        }

        #region 对字符串进行16进制或Base64的编码解码处理*******************************************
        /// <summary>
        /// 将一个字节数值转换为一个16进制字符串
        /// </summary>
        /// <param name="bytBuf">字节数组</param>
        /// <returns>16进制字符串</returns>
        public static string ByteToHex(byte[] bytBuf)
        {
            System.Text.StringBuilder myStr = new System.Text.StringBuilder();
            for (int iCount = 0; iCount < bytBuf.Length; iCount++)
            {
                myStr.Append(bytBuf[iCount].ToString("X2"));
            }
            return myStr.ToString();
        }

        /// <summary>
        /// 将字符串转换为GB2312编码后的16进制字符串
        /// </summary>
        /// <param name="strData"></param>
        /// <returns></returns>
        public static string ToHexString(string strData)
        {
            if (strData != null)
            {
                byte[] bytData = System.Text.Encoding.GetEncoding(936).GetBytes(strData);
                return ByteToHex(bytData);
            }
            else
                return null;
        }
        public static string FromHexString(string strData)
        {
            if (strData != null)
            {
                System.Text.Decoder myDec = System.Text.Encoding.GetEncoding(936).GetDecoder();
                byte[] bytData = HexToByte(strData);
                char[] myChars = new char[myDec.GetCharCount(bytData, 0, bytData.Length)];
                myDec.GetChars(bytData, 0, bytData.Length, myChars, 0);
                return new string(myChars);
            }
            else
                return null;
        }
        public static byte[] HexToByte(string strData)
        {
            if (strData != null)
            {
                int iSize = strData.Length;
                byte[] bytData = new byte[iSize];
                int iByte;
                int iByteCount = 0;
                int iCharCount = 0;
                int iCount = 0;
                System.Text.Encoding.ASCII.GetBytes(strData.ToUpper(), 0, strData.Length, bytData, 0);
                for (iCount = 0; iCount < iSize; iCount++)
                {
                    iByte = bytData[iCount];
                    if ((bytData[iCount] >= 48 && bytData[iCount] <= 57) || (bytData[iCount] >= 65 && bytData[iCount] <= 70))
                    {
                        if (bytData[iCount] <= 57)
                            iByte = bytData[iCount] - 48;
                        else
                            iByte = bytData[iCount] - 65 + 10;
                        iCharCount++;
                        if ((iCharCount % 2) == 0 && iCharCount > 0)
                        {
                            bytData[iByteCount] = Convert.ToByte(bytData[iByteCount] * 16 + iByte);
                            iByteCount++;
                        }
                        else
                            bytData[iByteCount] = Convert.ToByte(iByte);
                    }
                }
                byte[] bytOut = new byte[iByteCount];
                for (iCount = 0; iCount < iByteCount; iCount++)
                    bytOut[iCount] = bytData[iCount];
                return bytOut;
            }
            else
                return null;
        }

        public static string ToBase64String(string strData)
        {
            if (strData == null)
                return null;
            else
                return Convert.ToBase64String(System.Text.Encoding.GetEncoding(936).GetBytes(strData));
        }
        public static string FromBase64String(string strData)
        {
            if (strData == null)
                return null;
            else
            {
                byte[] bytData = Convert.FromBase64String(strData);
                char[] chrData = System.Text.Encoding.GetEncoding(936).GetChars(bytData);
                return new string(chrData);
            }
        }

        /// <summary>
        /// 判断一个字符的编码是否是属于Base64字符
        /// </summary>
        /// <param name="intChar">字符的Ansi或Unicode编码</param>
        /// <returns>判断结果</returns>
        public static bool isBase64Ascii(int intChar)
        {
            return ((intChar >= 65 && intChar <= 90)
                || (intChar >= 97 && intChar <= 122)
                || (intChar >= 48 && intChar <= 57)
                || intChar == 43
                || intChar == 47
                || intChar == 61);
        }

        /// <summary>
        /// 格式化Base64编码字符串，进行分隔处理
        /// </summary>
        /// <param name="strBase64">纯的Base64编码字符串</param>
        /// <param name="GroupSize">一组编码的字符个数</param>
        /// <param name="LineGroupCount">每行文本的编码组个数</param>
        /// <returns>格式化后的字符串</returns>
        public static string FormatBase64String(string strBase64, int GroupSize, int LineGroupCount)
        {
            if (strBase64 == null || strBase64.Length == 0 || (GroupSize <= 0 && LineGroupCount <= 0))
                return strBase64;

            System.Text.StringBuilder myStr = new System.Text.StringBuilder();
            int iSize = strBase64.Length;
            int iCount = 0;
            LineGroupCount *= GroupSize;
            while (true)
            {
                myStr.Append(" ");
                if (iCount + GroupSize < iSize)
                {
                    myStr.Append(strBase64.Substring(iCount, GroupSize));
                }
                else
                {
                    myStr.Append(strBase64.Substring(iCount));
                    break;
                }
                iCount += GroupSize;
                if (iCount % LineGroupCount == 0)
                    myStr.Append("\r\n");
            }
            return myStr.ToString();
        }


        #endregion

        #region 置换加密字符串的函数群*************************************************************
        /// <summary>
        /// 判断一个字符串是否经过置换加密
        /// </summary>
        /// <param name="strData">原始字符串</param>
        /// <returns>是否经过置换加密</returns>
        public static bool isExchangeEncrypt(string strData)
        {
            const string c_Pre = "HTEEV1.0";
            if (strData != null)
            {
                if (strData.StartsWith(c_Pre) && strData.EndsWith(c_Pre))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// 通过有规律的置换字符来打乱字符原有的序列来加密字符串
        /// </summary>
        /// <param name="strSource">原始字符串</param>
        /// <param name="toEncrypt">是否进行加密，True:加密字符串 False:解密字符串</param>
        /// <param name="bolHead">是否处理加密的标记头</param>
        /// <returns>处理过的字符串</returns>
        public static string ExchangeEncrypt(string strSource, bool toEncrypt, bool bolHead)
        {
            System.Char[] myChar;
            string strOut;
            int iLength;
            const string c_Pre = "HTEEV1.0";
            if (StringHelper.isBlankString(strSource))
                return null;
            if (toEncrypt)
            {
                iLength = (int)System.Math.Ceiling((double)strSource.Length / 2);
                myChar = strSource.ToCharArray();
                ExchangeChar(myChar, 2, iLength, true);
                ExchangeChar(myChar, 3, iLength, true);
                ExchangeChar(myChar, 7, 3, true);
                ExchangeChar(myChar, 3, 33, true);
                strOut = new string(myChar);
                if (bolHead)
                    return c_Pre + strOut + c_Pre;
                else
                    return strOut;
            }
            else
            {
                if (bolHead)
                {
                    strSource = strSource.Trim();
                    if (strSource.StartsWith(c_Pre) && strSource.EndsWith(c_Pre))
                        strSource = strSource.Substring(c_Pre.Length, strSource.Length - c_Pre.Length * 2);
                    else
                        return null;
                }
                iLength = (int)System.Math.Ceiling((double)strSource.Length / 2);
                myChar = strSource.ToCharArray();
                ExchangeChar(myChar, 3, 33, false);
                ExchangeChar(myChar, 7, 3, false);
                ExchangeChar(myChar, 3, iLength, false);
                ExchangeChar(myChar, 2, iLength, false);
                strOut = new string(myChar);
                return strOut;
            }
        }

        /// <summary>
        /// 通过置换字符的方式加密字符数组
        /// 将原始字符数组中的字符有规律的打乱来加密字符串
        /// </summary>
        /// <param name="myChar">字符数组</param>
        /// <param name="iStep">置换的字符序号的步长</param>
        /// <param name="iStep2">置换的字符序号</param>
        /// <param name="bolDirect">处理方向</param>
        public static void ExchangeChar(System.Char[] myChar, int iStep, int iStep2, bool bolDirect)
        {
            int iCount;
            System.Char chrTemp;
            int iLength;
            int index;
            //int iHCount ;
            if (iStep == 0) return;
            iLength = myChar.Length;
            if (bolDirect)
            {
                for (iCount = 0; iCount < iLength; iCount += iStep)
                {
                    index = (iCount + iStep2) % iLength;
                    chrTemp = myChar[iCount];
                    myChar[iCount] = myChar[index];
                    myChar[index] = chrTemp;
                }
            }
            else
            {
                index = (iLength - 1) - ((iLength - 1) % iStep);
                iStep = 0 - iStep;
                for (iCount = index; iCount >= 0; iCount += iStep)
                {
                    index = (iCount + iStep2) % iLength;
                    chrTemp = myChar[iCount];
                    myChar[iCount] = myChar[index];
                    myChar[index] = chrTemp;
                }
            }
        }
        #endregion
    }

}
