//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace PayAPIInterfaceHandle.AHFYCityWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IJQCenterWebServicebinding", Namespace="http://tempuri.org/")]
    public partial class IJQCenterWebServiceservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConnectTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPersonInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientRegisterModifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientFeeUpLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientFeeCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientFeeCancelAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientRegisterCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientOutRegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientOutRegisterCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientTryCalculateOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientCalculateOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientCalculateCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadInPFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitApplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchApplyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ItemContrastUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback ItemContrastDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownCalTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchHospitalOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientAddFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCalcuROperationCompleted;
        
        private System.Threading.SendOrPostCallback DownCalcuListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ItemContrastAllDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback ItemContrastAllUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatientFeeUpLoadAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback InpatDiagnosisUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownTreatOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownICDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownHospitalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadTransferOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IJQCenterWebServiceservice() {
            this.Url = global::PayAPIInterfaceHandle.Properties.Settings.Default.PayAPIInterfaceHandle_AHFYCityWebReference_IJQCenterWebServiceservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConnectTestCompletedEventHandler ConnectTestCompleted;
        
        /// <remarks/>
        public event GetPersonInfoCompletedEventHandler GetPersonInfoCompleted;
        
        /// <remarks/>
        public event InpatientRegisterCompletedEventHandler InpatientRegisterCompleted;
        
        /// <remarks/>
        public event InpatientRegisterModifyCompletedEventHandler InpatientRegisterModifyCompleted;
        
        /// <remarks/>
        public event InpatientFeeUpLoadCompletedEventHandler InpatientFeeUpLoadCompleted;
        
        /// <remarks/>
        public event InpatientFeeCancelCompletedEventHandler InpatientFeeCancelCompleted;
        
        /// <remarks/>
        public event InpatientFeeCancelAllCompletedEventHandler InpatientFeeCancelAllCompleted;
        
        /// <remarks/>
        public event InpatientRegisterCancelCompletedEventHandler InpatientRegisterCancelCompleted;
        
        /// <remarks/>
        public event InpatientOutRegisterCompletedEventHandler InpatientOutRegisterCompleted;
        
        /// <remarks/>
        public event InpatientOutRegisterCancelCompletedEventHandler InpatientOutRegisterCancelCompleted;
        
        /// <remarks/>
        public event InpatientTryCalculateCompletedEventHandler InpatientTryCalculateCompleted;
        
        /// <remarks/>
        public event InpatientCalculateCompletedEventHandler InpatientCalculateCompleted;
        
        /// <remarks/>
        public event InpatientCalculateCancelCompletedEventHandler InpatientCalculateCancelCompleted;
        
        /// <remarks/>
        public event DownloadInPFeeCompletedEventHandler DownloadInPFeeCompleted;
        
        /// <remarks/>
        public event SubmitApplyCompletedEventHandler SubmitApplyCompleted;
        
        /// <remarks/>
        public event SearchApplyCompletedEventHandler SearchApplyCompleted;
        
        /// <remarks/>
        public event ItemContrastUpCompletedEventHandler ItemContrastUpCompleted;
        
        /// <remarks/>
        public event ItemContrastDownCompletedEventHandler ItemContrastDownCompleted;
        
        /// <remarks/>
        public event DownCalTypeCompletedEventHandler DownCalTypeCompleted;
        
        /// <remarks/>
        public event SearchHospitalCompletedEventHandler SearchHospitalCompleted;
        
        /// <remarks/>
        public event SearchItemCompletedEventHandler SearchItemCompleted;
        
        /// <remarks/>
        public event InpatientAddFeeCompletedEventHandler InpatientAddFeeCompleted;
        
        /// <remarks/>
        public event DownItemListCompletedEventHandler DownItemListCompleted;
        
        /// <remarks/>
        public event SearchCalcuRCompletedEventHandler SearchCalcuRCompleted;
        
        /// <remarks/>
        public event DownCalcuListCompletedEventHandler DownCalcuListCompleted;
        
        /// <remarks/>
        public event ItemContrastAllDownCompletedEventHandler ItemContrastAllDownCompleted;
        
        /// <remarks/>
        public event ItemContrastAllUpCompletedEventHandler ItemContrastAllUpCompleted;
        
        /// <remarks/>
        public event InpatientFeeUpLoadAllCompletedEventHandler InpatientFeeUpLoadAllCompleted;
        
        /// <remarks/>
        public event InpatDiagnosisUpdateCompletedEventHandler InpatDiagnosisUpdateCompleted;
        
        /// <remarks/>
        public event DownTreatCompletedEventHandler DownTreatCompleted;
        
        /// <remarks/>
        public event DownICDCompletedEventHandler DownICDCompleted;
        
        /// <remarks/>
        public event DownHospitalsCompletedEventHandler DownHospitalsCompleted;
        
        /// <remarks/>
        public event uploadTransferCompletedEventHandler uploadTransferCompleted;
        
        /// <remarks/>
        public event cancelTransferCompletedEventHandler cancelTransferCompleted;
        
        /// <remarks/>
        public event downloadTransferCompletedEventHandler downloadTransferCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#ConnectTest", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ConnectTest(string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("ConnectTest", new object[] {
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectTestAsync(string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.ConnectTestAsync(sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void ConnectTestAsync(string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.ConnectTestOperationCompleted == null)) {
                this.ConnectTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectTestOperationCompleted);
            }
            this.InvokeAsync("ConnectTest", new object[] {
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.ConnectTestOperationCompleted, userState);
        }
        
        private void OnConnectTestOperationCompleted(object arg) {
            if ((this.ConnectTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectTestCompleted(this, new ConnectTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#GetPersonInfo", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int GetPersonInfo(string sAreaCode, string sHospitalCode, string sMedicalCode, string sCardCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("GetPersonInfo", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sMedicalCode,
                        sCardCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string sAreaCode, string sHospitalCode, string sMedicalCode, string sCardCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.GetPersonInfoAsync(sAreaCode, sHospitalCode, sMedicalCode, sCardCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void GetPersonInfoAsync(string sAreaCode, string sHospitalCode, string sMedicalCode, string sCardCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.GetPersonInfoOperationCompleted == null)) {
                this.GetPersonInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPersonInfoOperationCompleted);
            }
            this.InvokeAsync("GetPersonInfo", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sMedicalCode,
                        sCardCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.GetPersonInfoOperationCompleted, userState);
        }
        
        private void OnGetPersonInfoOperationCompleted(object arg) {
            if ((this.GetPersonInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPersonInfoCompleted(this, new GetPersonInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientRegister", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientRegister(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sInpatientID, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatientRegister", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sInpatientCode,
                        sMedicalCode,
                        sCardCode,
                        sPeopCode,
                        sPeopName,
                        sSex,
                        sAge,
                        sBirthDay,
                        sIDCardNo,
                        sDiagnoseCodeIn1,
                        sDiagnoseNameIn1,
                        sDiagnoseCodeIn2,
                        sDiagnoseNameIn2,
                        sDiagnoseCodeIn3,
                        sDiagnoseNameIn3,
                        sOperationCode1,
                        sOperationName1,
                        sOperationCode2,
                        sOperationName2,
                        sOperationCode3,
                        sOperationName3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sBed,
                        sDoctorName,
                        sChangeCode,
                        sChangeRCode,
                        sCivilCode,
                        sBearCode,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sInpatientID,
                        sMessage});
            sInpatientID = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientRegisterAsync(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sInpatientID, 
                    string sMessage) {
            this.InpatientRegisterAsync(sAreaCode, sHospitalCode, sInpatientCode, sMedicalCode, sCardCode, sPeopCode, sPeopName, sSex, sAge, sBirthDay, sIDCardNo, sDiagnoseCodeIn1, sDiagnoseNameIn1, sDiagnoseCodeIn2, sDiagnoseNameIn2, sDiagnoseCodeIn3, sDiagnoseNameIn3, sOperationCode1, sOperationName1, sOperationCode2, sOperationName2, sOperationCode3, sOperationName3, sSectionOfficeName, sSectionOfficeCode, sCureCode, sInHospitalCode, sInHosptialDate, sBed, sDoctorName, sChangeCode, sChangeRCode, sCivilCode, sBearCode, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sInpatientID, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientRegisterAsync(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sInpatientID, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatientRegisterOperationCompleted == null)) {
                this.InpatientRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientRegisterOperationCompleted);
            }
            this.InvokeAsync("InpatientRegister", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sInpatientCode,
                        sMedicalCode,
                        sCardCode,
                        sPeopCode,
                        sPeopName,
                        sSex,
                        sAge,
                        sBirthDay,
                        sIDCardNo,
                        sDiagnoseCodeIn1,
                        sDiagnoseNameIn1,
                        sDiagnoseCodeIn2,
                        sDiagnoseNameIn2,
                        sDiagnoseCodeIn3,
                        sDiagnoseNameIn3,
                        sOperationCode1,
                        sOperationName1,
                        sOperationCode2,
                        sOperationName2,
                        sOperationCode3,
                        sOperationName3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sBed,
                        sDoctorName,
                        sChangeCode,
                        sChangeRCode,
                        sCivilCode,
                        sBearCode,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sInpatientID,
                        sMessage}, this.InpatientRegisterOperationCompleted, userState);
        }
        
        private void OnInpatientRegisterOperationCompleted(object arg) {
            if ((this.InpatientRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientRegisterCompleted(this, new InpatientRegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientRegisterModify", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientRegisterModify(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatientRegisterModify", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sInpatientCode,
                        sMedicalCode,
                        sCardCode,
                        sPeopCode,
                        sPeopName,
                        sSex,
                        sAge,
                        sBirthDay,
                        sIDCardNo,
                        sDiagnoseCodeIn1,
                        sDiagnoseNameIn1,
                        sDiagnoseCodeIn2,
                        sDiagnoseNameIn2,
                        sDiagnoseCodeIn3,
                        sDiagnoseNameIn3,
                        sOperationCode1,
                        sOperationName1,
                        sOperationCode2,
                        sOperationName2,
                        sOperationCode3,
                        sOperationName3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sBed,
                        sDoctorName,
                        sChangeCode,
                        sChangeRCode,
                        sCivilCode,
                        sBearCode,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientRegisterModifyAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage) {
            this.InpatientRegisterModifyAsync(sAreaCode, sInpatientID, sHospitalCode, sInpatientCode, sMedicalCode, sCardCode, sPeopCode, sPeopName, sSex, sAge, sBirthDay, sIDCardNo, sDiagnoseCodeIn1, sDiagnoseNameIn1, sDiagnoseCodeIn2, sDiagnoseNameIn2, sDiagnoseCodeIn3, sDiagnoseNameIn3, sOperationCode1, sOperationName1, sOperationCode2, sOperationName2, sOperationCode3, sOperationName3, sSectionOfficeName, sSectionOfficeCode, sCureCode, sInHospitalCode, sInHosptialDate, sBed, sDoctorName, sChangeCode, sChangeRCode, sCivilCode, sBearCode, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientRegisterModifyAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sInpatientCode, 
                    string sMedicalCode, 
                    string sCardCode, 
                    string sPeopCode, 
                    string sPeopName, 
                    string sSex, 
                    string sAge, 
                    string sBirthDay, 
                    string sIDCardNo, 
                    string sDiagnoseCodeIn1, 
                    string sDiagnoseNameIn1, 
                    string sDiagnoseCodeIn2, 
                    string sDiagnoseNameIn2, 
                    string sDiagnoseCodeIn3, 
                    string sDiagnoseNameIn3, 
                    string sOperationCode1, 
                    string sOperationName1, 
                    string sOperationCode2, 
                    string sOperationName2, 
                    string sOperationCode3, 
                    string sOperationName3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sBed, 
                    string sDoctorName, 
                    string sChangeCode, 
                    string sChangeRCode, 
                    string sCivilCode, 
                    string sBearCode, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatientRegisterModifyOperationCompleted == null)) {
                this.InpatientRegisterModifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientRegisterModifyOperationCompleted);
            }
            this.InvokeAsync("InpatientRegisterModify", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sInpatientCode,
                        sMedicalCode,
                        sCardCode,
                        sPeopCode,
                        sPeopName,
                        sSex,
                        sAge,
                        sBirthDay,
                        sIDCardNo,
                        sDiagnoseCodeIn1,
                        sDiagnoseNameIn1,
                        sDiagnoseCodeIn2,
                        sDiagnoseNameIn2,
                        sDiagnoseCodeIn3,
                        sDiagnoseNameIn3,
                        sOperationCode1,
                        sOperationName1,
                        sOperationCode2,
                        sOperationName2,
                        sOperationCode3,
                        sOperationName3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sBed,
                        sDoctorName,
                        sChangeCode,
                        sChangeRCode,
                        sCivilCode,
                        sBearCode,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientRegisterModifyOperationCompleted, userState);
        }
        
        private void OnInpatientRegisterModifyOperationCompleted(object arg) {
            if ((this.InpatientRegisterModifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientRegisterModifyCompleted(this, new InpatientRegisterModifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientFeeUpLoad", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientFeeUpLoad(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCenterItemCode, 
                    string sItemKey, 
                    string sItemType, 
                    string sReceiptName, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sIfCompound, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sResult, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatientFeeUpLoad", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCenterItemCode,
                        sItemKey,
                        sItemType,
                        sReceiptName,
                        sItemCode,
                        sItemName,
                        sItemSpec,
                        sItemDose,
                        sItemArea,
                        sItemProc,
                        sItemPart,
                        sIfCompound,
                        sTime,
                        sUnit,
                        sPrice,
                        sSum,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sDoctorName,
                        sBed,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientFeeUpLoadAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCenterItemCode, 
                    string sItemKey, 
                    string sItemType, 
                    string sReceiptName, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sIfCompound, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage) {
            this.InpatientFeeUpLoadAsync(sAreaCode, sInpatientID, sHospitalCode, sCenterItemCode, sItemKey, sItemType, sReceiptName, sItemCode, sItemName, sItemSpec, sItemDose, sItemArea, sItemProc, sItemPart, sIfCompound, sTime, sUnit, sPrice, sSum, sSectionOfficeName, sSectionOfficeCode, sDoctorName, sBed, sOperatorDate, sInputName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientFeeUpLoadAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCenterItemCode, 
                    string sItemKey, 
                    string sItemType, 
                    string sReceiptName, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sIfCompound, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatientFeeUpLoadOperationCompleted == null)) {
                this.InpatientFeeUpLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientFeeUpLoadOperationCompleted);
            }
            this.InvokeAsync("InpatientFeeUpLoad", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCenterItemCode,
                        sItemKey,
                        sItemType,
                        sReceiptName,
                        sItemCode,
                        sItemName,
                        sItemSpec,
                        sItemDose,
                        sItemArea,
                        sItemProc,
                        sItemPart,
                        sIfCompound,
                        sTime,
                        sUnit,
                        sPrice,
                        sSum,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sDoctorName,
                        sBed,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.InpatientFeeUpLoadOperationCompleted, userState);
        }
        
        private void OnInpatientFeeUpLoadOperationCompleted(object arg) {
            if ((this.InpatientFeeUpLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientFeeUpLoadCompleted(this, new InpatientFeeUpLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientFeeCancel", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientFeeCancel(string sAreaCode, string sInpatientID, string sHospitalCode, string sCenterKey, string sItemKey, string sOperatorDate, string sInputName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("InpatientFeeCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCenterKey,
                        sItemKey,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientFeeCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCenterKey, string sItemKey, string sOperatorDate, string sInputName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.InpatientFeeCancelAsync(sAreaCode, sInpatientID, sHospitalCode, sCenterKey, sItemKey, sOperatorDate, sInputName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientFeeCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCenterKey, string sItemKey, string sOperatorDate, string sInputName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.InpatientFeeCancelOperationCompleted == null)) {
                this.InpatientFeeCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientFeeCancelOperationCompleted);
            }
            this.InvokeAsync("InpatientFeeCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCenterKey,
                        sItemKey,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientFeeCancelOperationCompleted, userState);
        }
        
        private void OnInpatientFeeCancelOperationCompleted(object arg) {
            if ((this.InpatientFeeCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientFeeCancelCompleted(this, new InpatientFeeCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientFeeCancelAll", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientFeeCancelAll(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("InpatientFeeCancelAll", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientFeeCancelAllAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.InpatientFeeCancelAllAsync(sAreaCode, sInpatientID, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientFeeCancelAllAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.InpatientFeeCancelAllOperationCompleted == null)) {
                this.InpatientFeeCancelAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientFeeCancelAllOperationCompleted);
            }
            this.InvokeAsync("InpatientFeeCancelAll", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientFeeCancelAllOperationCompleted, userState);
        }
        
        private void OnInpatientFeeCancelAllOperationCompleted(object arg) {
            if ((this.InpatientFeeCancelAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientFeeCancelAllCompleted(this, new InpatientFeeCancelAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientRegisterCancel", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientRegisterCancel(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("InpatientRegisterCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientRegisterCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.InpatientRegisterCancelAsync(sAreaCode, sInpatientID, sHospitalCode, sReason, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientRegisterCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.InpatientRegisterCancelOperationCompleted == null)) {
                this.InpatientRegisterCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientRegisterCancelOperationCompleted);
            }
            this.InvokeAsync("InpatientRegisterCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientRegisterCancelOperationCompleted, userState);
        }
        
        private void OnInpatientRegisterCancelOperationCompleted(object arg) {
            if ((this.InpatientRegisterCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientRegisterCancelCompleted(this, new InpatientRegisterCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientOutRegister", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientOutRegister(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sOutHospitalCode, 
                    string sOutHosptialDate, 
                    string sOperatorName, 
                    string sReceiptCode, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatientOutRegister", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sDiagnoseCodeOut1,
                        sDiagnoseNameOut1,
                        sDiagnoseCodeOut2,
                        sDiagnoseNameOut2,
                        sDiagnoseCodeOut3,
                        sDiagnoseNameOut3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sOutHospitalCode,
                        sOutHosptialDate,
                        sOperatorName,
                        sReceiptCode,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientOutRegisterAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sOutHospitalCode, 
                    string sOutHosptialDate, 
                    string sOperatorName, 
                    string sReceiptCode, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage) {
            this.InpatientOutRegisterAsync(sAreaCode, sInpatientID, sHospitalCode, sDiagnoseCodeOut1, sDiagnoseNameOut1, sDiagnoseCodeOut2, sDiagnoseNameOut2, sDiagnoseCodeOut3, sDiagnoseNameOut3, sSectionOfficeName, sSectionOfficeCode, sOutHospitalCode, sOutHosptialDate, sOperatorName, sReceiptCode, sAllInCost, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientOutRegisterAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sOutHospitalCode, 
                    string sOutHosptialDate, 
                    string sOperatorName, 
                    string sReceiptCode, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatientOutRegisterOperationCompleted == null)) {
                this.InpatientOutRegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientOutRegisterOperationCompleted);
            }
            this.InvokeAsync("InpatientOutRegister", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sDiagnoseCodeOut1,
                        sDiagnoseNameOut1,
                        sDiagnoseCodeOut2,
                        sDiagnoseNameOut2,
                        sDiagnoseCodeOut3,
                        sDiagnoseNameOut3,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sOutHospitalCode,
                        sOutHosptialDate,
                        sOperatorName,
                        sReceiptCode,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientOutRegisterOperationCompleted, userState);
        }
        
        private void OnInpatientOutRegisterOperationCompleted(object arg) {
            if ((this.InpatientOutRegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientOutRegisterCompleted(this, new InpatientOutRegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientOutRegisterCancel", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientOutRegisterCancel(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("InpatientOutRegisterCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientOutRegisterCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.InpatientOutRegisterCancelAsync(sAreaCode, sInpatientID, sHospitalCode, sReason, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientOutRegisterCancelAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.InpatientOutRegisterCancelOperationCompleted == null)) {
                this.InpatientOutRegisterCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientOutRegisterCancelOperationCompleted);
            }
            this.InvokeAsync("InpatientOutRegisterCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientOutRegisterCancelOperationCompleted, userState);
        }
        
        private void OnInpatientOutRegisterCancelOperationCompleted(object arg) {
            if ((this.InpatientOutRegisterCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientOutRegisterCancelCompleted(this, new InpatientOutRegisterCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientTryCalculate", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientTryCalculate(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sAllInCost, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("InpatientTryCalculate", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCalcCode,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientTryCalculateAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sAllInCost, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.InpatientTryCalculateAsync(sAreaCode, sInpatientID, sHospitalCode, sCalcCode, sAllInCost, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientTryCalculateAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sAllInCost, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.InpatientTryCalculateOperationCompleted == null)) {
                this.InpatientTryCalculateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientTryCalculateOperationCompleted);
            }
            this.InvokeAsync("InpatientTryCalculate", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCalcCode,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.InpatientTryCalculateOperationCompleted, userState);
        }
        
        private void OnInpatientTryCalculateOperationCompleted(object arg) {
            if ((this.InpatientTryCalculateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientTryCalculateCompleted(this, new InpatientTryCalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientCalculate", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientCalculate(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sReceiptCode, string sAllInCost, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("InpatientCalculate", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCalcCode,
                        sReceiptCode,
                        sAllInCost,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientCalculateAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sReceiptCode, string sAllInCost, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.InpatientCalculateAsync(sAreaCode, sInpatientID, sHospitalCode, sCalcCode, sReceiptCode, sAllInCost, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientCalculateAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sCalcCode, string sReceiptCode, string sAllInCost, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.InpatientCalculateOperationCompleted == null)) {
                this.InpatientCalculateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientCalculateOperationCompleted);
            }
            this.InvokeAsync("InpatientCalculate", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCalcCode,
                        sReceiptCode,
                        sAllInCost,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.InpatientCalculateOperationCompleted, userState);
        }
        
        private void OnInpatientCalculateOperationCompleted(object arg) {
            if ((this.InpatientCalculateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientCalculateCompleted(this, new InpatientCalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientCalculateCancel", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientCalculateCancel(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("InpatientCalculateCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sCalculateCode,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientCalculateCancelAsync(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.InpatientCalculateCancelAsync(sAreaCode, sInpatientID, sCalculateCode, sHospitalCode, sReason, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientCalculateCancelAsync(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sReason, string sOperatorName, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.InpatientCalculateCancelOperationCompleted == null)) {
                this.InpatientCalculateCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientCalculateCancelOperationCompleted);
            }
            this.InvokeAsync("InpatientCalculateCancel", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sCalculateCode,
                        sHospitalCode,
                        sReason,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatientCalculateCancelOperationCompleted, userState);
        }
        
        private void OnInpatientCalculateCancelOperationCompleted(object arg) {
            if ((this.InpatientCalculateCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientCalculateCancelCompleted(this, new InpatientCalculateCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownloadInPFee", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownloadInPFee(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownloadInPFee", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadInPFeeAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownloadInPFeeAsync(sAreaCode, sInpatientID, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownloadInPFeeAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownloadInPFeeOperationCompleted == null)) {
                this.DownloadInPFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadInPFeeOperationCompleted);
            }
            this.InvokeAsync("DownloadInPFee", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownloadInPFeeOperationCompleted, userState);
        }
        
        private void OnDownloadInPFeeOperationCompleted(object arg) {
            if ((this.DownloadInPFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadInPFeeCompleted(this, new DownloadInPFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#SubmitApply", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int SubmitApply(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sCalcCode, 
                    string sOperatorName, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sMessage) {
            object[] results = this.Invoke("SubmitApply", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sDiagnoseCodeOut1,
                        sDiagnoseNameOut1,
                        sDiagnoseCodeOut2,
                        sDiagnoseNameOut2,
                        sDiagnoseCodeOut3,
                        sDiagnoseNameOut3,
                        sCalcCode,
                        sOperatorName,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitApplyAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sCalcCode, 
                    string sOperatorName, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage) {
            this.SubmitApplyAsync(sAreaCode, sInpatientID, sHospitalCode, sDiagnoseCodeOut1, sDiagnoseNameOut1, sDiagnoseCodeOut2, sDiagnoseNameOut2, sDiagnoseCodeOut3, sDiagnoseNameOut3, sCalcCode, sOperatorName, sAllInCost, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void SubmitApplyAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sDiagnoseCodeOut1, 
                    string sDiagnoseNameOut1, 
                    string sDiagnoseCodeOut2, 
                    string sDiagnoseNameOut2, 
                    string sDiagnoseCodeOut3, 
                    string sDiagnoseNameOut3, 
                    string sCalcCode, 
                    string sOperatorName, 
                    string sAllInCost, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage, 
                    object userState) {
            if ((this.SubmitApplyOperationCompleted == null)) {
                this.SubmitApplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitApplyOperationCompleted);
            }
            this.InvokeAsync("SubmitApply", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sDiagnoseCodeOut1,
                        sDiagnoseNameOut1,
                        sDiagnoseCodeOut2,
                        sDiagnoseNameOut2,
                        sDiagnoseCodeOut3,
                        sDiagnoseNameOut3,
                        sCalcCode,
                        sOperatorName,
                        sAllInCost,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.SubmitApplyOperationCompleted, userState);
        }
        
        private void OnSubmitApplyOperationCompleted(object arg) {
            if ((this.SubmitApplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitApplyCompleted(this, new SubmitApplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#SearchApply", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int SearchApply(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("SearchApply", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchApplyAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.SearchApplyAsync(sAreaCode, sInpatientID, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void SearchApplyAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.SearchApplyOperationCompleted == null)) {
                this.SearchApplyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchApplyOperationCompleted);
            }
            this.InvokeAsync("SearchApply", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.SearchApplyOperationCompleted, userState);
        }
        
        private void OnSearchApplyOperationCompleted(object arg) {
            if ((this.SearchApplyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchApplyCompleted(this, new SearchApplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#ItemContrastUp", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ItemContrastUp(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sCenterItemC, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sUnit, 
                    string sPrice, 
                    string sItemType, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sMessage) {
            object[] results = this.Invoke("ItemContrastUp", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sCenterItemC,
                        sItemCode,
                        sItemName,
                        sItemSpec,
                        sItemDose,
                        sItemArea,
                        sItemProc,
                        sItemPart,
                        sUnit,
                        sPrice,
                        sItemType,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ItemContrastUpAsync(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sCenterItemC, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sUnit, 
                    string sPrice, 
                    string sItemType, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage) {
            this.ItemContrastUpAsync(sAreaCode, sHospitalCode, sCenterItemC, sItemCode, sItemName, sItemSpec, sItemDose, sItemArea, sItemProc, sItemPart, sUnit, sPrice, sItemType, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void ItemContrastUpAsync(
                    string sAreaCode, 
                    string sHospitalCode, 
                    string sCenterItemC, 
                    string sItemCode, 
                    string sItemName, 
                    string sItemSpec, 
                    string sItemDose, 
                    string sItemArea, 
                    string sItemProc, 
                    string sItemPart, 
                    string sUnit, 
                    string sPrice, 
                    string sItemType, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage, 
                    object userState) {
            if ((this.ItemContrastUpOperationCompleted == null)) {
                this.ItemContrastUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnItemContrastUpOperationCompleted);
            }
            this.InvokeAsync("ItemContrastUp", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sCenterItemC,
                        sItemCode,
                        sItemName,
                        sItemSpec,
                        sItemDose,
                        sItemArea,
                        sItemProc,
                        sItemPart,
                        sUnit,
                        sPrice,
                        sItemType,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.ItemContrastUpOperationCompleted, userState);
        }
        
        private void OnItemContrastUpOperationCompleted(object arg) {
            if ((this.ItemContrastUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ItemContrastUpCompleted(this, new ItemContrastUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#ItemContrastDown", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ItemContrastDown(string sAreaCode, string sHospitalCode, string sCenterItemC, string sItemCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("ItemContrastDown", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sCenterItemC,
                        sItemCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ItemContrastDownAsync(string sAreaCode, string sHospitalCode, string sCenterItemC, string sItemCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.ItemContrastDownAsync(sAreaCode, sHospitalCode, sCenterItemC, sItemCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void ItemContrastDownAsync(string sAreaCode, string sHospitalCode, string sCenterItemC, string sItemCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.ItemContrastDownOperationCompleted == null)) {
                this.ItemContrastDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnItemContrastDownOperationCompleted);
            }
            this.InvokeAsync("ItemContrastDown", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sCenterItemC,
                        sItemCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.ItemContrastDownOperationCompleted, userState);
        }
        
        private void OnItemContrastDownOperationCompleted(object arg) {
            if ((this.ItemContrastDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ItemContrastDownCompleted(this, new ItemContrastDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownCalType", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownCalType(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownCalType", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownCalTypeAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownCalTypeAsync(sAreaCode, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownCalTypeAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownCalTypeOperationCompleted == null)) {
                this.DownCalTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownCalTypeOperationCompleted);
            }
            this.InvokeAsync("DownCalType", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownCalTypeOperationCompleted, userState);
        }
        
        private void OnDownCalTypeOperationCompleted(object arg) {
            if ((this.DownCalTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownCalTypeCompleted(this, new DownCalTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#SearchHospital", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int SearchHospital(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("SearchHospital", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchHospitalAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.SearchHospitalAsync(sAreaCode, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void SearchHospitalAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.SearchHospitalOperationCompleted == null)) {
                this.SearchHospitalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchHospitalOperationCompleted);
            }
            this.InvokeAsync("SearchHospital", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.SearchHospitalOperationCompleted, userState);
        }
        
        private void OnSearchHospitalOperationCompleted(object arg) {
            if ((this.SearchHospitalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchHospitalCompleted(this, new SearchHospitalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#SearchItem", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int SearchItem(string sAreaCode, string sHospitalCode, string sHelp, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("SearchItem", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sHelp,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchItemAsync(string sAreaCode, string sHospitalCode, string sHelp, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.SearchItemAsync(sAreaCode, sHospitalCode, sHelp, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void SearchItemAsync(string sAreaCode, string sHospitalCode, string sHelp, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.SearchItemOperationCompleted == null)) {
                this.SearchItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchItemOperationCompleted);
            }
            this.InvokeAsync("SearchItem", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sHelp,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.SearchItemOperationCompleted, userState);
        }
        
        private void OnSearchItemOperationCompleted(object arg) {
            if ((this.SearchItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchItemCompleted(this, new SearchItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientAddFee", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientAddFee(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCheckHosCode, 
                    string sCenterItemCode, 
                    string sCenterItemName, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sResult, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatientAddFee", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCheckHosCode,
                        sCenterItemCode,
                        sCenterItemName,
                        sTime,
                        sUnit,
                        sPrice,
                        sSum,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sDoctorName,
                        sBed,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientAddFeeAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCheckHosCode, 
                    string sCenterItemCode, 
                    string sCenterItemName, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage) {
            this.InpatientAddFeeAsync(sAreaCode, sInpatientID, sHospitalCode, sCheckHosCode, sCenterItemCode, sCenterItemName, sTime, sUnit, sPrice, sSum, sSectionOfficeName, sSectionOfficeCode, sDoctorName, sBed, sOperatorDate, sInputName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientAddFeeAsync(
                    string sAreaCode, 
                    string sInpatientID, 
                    string sHospitalCode, 
                    string sCheckHosCode, 
                    string sCenterItemCode, 
                    string sCenterItemName, 
                    string sTime, 
                    string sUnit, 
                    string sPrice, 
                    string sSum, 
                    string sSectionOfficeName, 
                    string sSectionOfficeCode, 
                    string sDoctorName, 
                    string sBed, 
                    string sOperatorDate, 
                    string sInputName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatientAddFeeOperationCompleted == null)) {
                this.InpatientAddFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientAddFeeOperationCompleted);
            }
            this.InvokeAsync("InpatientAddFee", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sCheckHosCode,
                        sCenterItemCode,
                        sCenterItemName,
                        sTime,
                        sUnit,
                        sPrice,
                        sSum,
                        sSectionOfficeName,
                        sSectionOfficeCode,
                        sDoctorName,
                        sBed,
                        sOperatorDate,
                        sInputName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.InpatientAddFeeOperationCompleted, userState);
        }
        
        private void OnInpatientAddFeeOperationCompleted(object arg) {
            if ((this.InpatientAddFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientAddFeeCompleted(this, new InpatientAddFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownItemList", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownItemList(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownItemList", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownItemListAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownItemListAsync(sAreaCode, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownItemListAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownItemListOperationCompleted == null)) {
                this.DownItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownItemListOperationCompleted);
            }
            this.InvokeAsync("DownItemList", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownItemListOperationCompleted, userState);
        }
        
        private void OnDownItemListOperationCompleted(object arg) {
            if ((this.DownItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownItemListCompleted(this, new DownItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#SearchCalcuR", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int SearchCalcuR(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("SearchCalcuR", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sCalculateCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCalcuRAsync(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.SearchCalcuRAsync(sAreaCode, sInpatientID, sCalculateCode, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void SearchCalcuRAsync(string sAreaCode, string sInpatientID, string sCalculateCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.SearchCalcuROperationCompleted == null)) {
                this.SearchCalcuROperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCalcuROperationCompleted);
            }
            this.InvokeAsync("SearchCalcuR", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sCalculateCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.SearchCalcuROperationCompleted, userState);
        }
        
        private void OnSearchCalcuROperationCompleted(object arg) {
            if ((this.SearchCalcuRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCalcuRCompleted(this, new SearchCalcuRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownCalcuList", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownCalcuList(string sAreaCode, string sHospitalCode, string sBeginDate, string sEndDate, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownCalcuList", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sBeginDate,
                        sEndDate,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownCalcuListAsync(string sAreaCode, string sHospitalCode, string sBeginDate, string sEndDate, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownCalcuListAsync(sAreaCode, sHospitalCode, sBeginDate, sEndDate, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownCalcuListAsync(string sAreaCode, string sHospitalCode, string sBeginDate, string sEndDate, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownCalcuListOperationCompleted == null)) {
                this.DownCalcuListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownCalcuListOperationCompleted);
            }
            this.InvokeAsync("DownCalcuList", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sBeginDate,
                        sEndDate,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownCalcuListOperationCompleted, userState);
        }
        
        private void OnDownCalcuListOperationCompleted(object arg) {
            if ((this.DownCalcuListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownCalcuListCompleted(this, new DownCalcuListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#ItemContrastAllDown", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ItemContrastAllDown(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("ItemContrastAllDown", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ItemContrastAllDownAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.ItemContrastAllDownAsync(sAreaCode, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void ItemContrastAllDownAsync(string sAreaCode, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.ItemContrastAllDownOperationCompleted == null)) {
                this.ItemContrastAllDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnItemContrastAllDownOperationCompleted);
            }
            this.InvokeAsync("ItemContrastAllDown", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.ItemContrastAllDownOperationCompleted, userState);
        }
        
        private void OnItemContrastAllDownOperationCompleted(object arg) {
            if ((this.ItemContrastAllDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ItemContrastAllDownCompleted(this, new ItemContrastAllDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#ItemContrastAllUp", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ItemContrastAllUp(string sAreaCode, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("ItemContrastAllUp", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sInput,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ItemContrastAllUpAsync(string sAreaCode, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.ItemContrastAllUpAsync(sAreaCode, sHospitalCode, sInput, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void ItemContrastAllUpAsync(string sAreaCode, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.ItemContrastAllUpOperationCompleted == null)) {
                this.ItemContrastAllUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnItemContrastAllUpOperationCompleted);
            }
            this.InvokeAsync("ItemContrastAllUp", new object[] {
                        sAreaCode,
                        sHospitalCode,
                        sInput,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.ItemContrastAllUpOperationCompleted, userState);
        }
        
        private void OnItemContrastAllUpOperationCompleted(object arg) {
            if ((this.ItemContrastAllUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ItemContrastAllUpCompleted(this, new ItemContrastAllUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatientFeeUpLoadAll", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatientFeeUpLoadAll(string sAreaCode, string sInpatientID, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("InpatientFeeUpLoadAll", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sInput,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatientFeeUpLoadAllAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.InpatientFeeUpLoadAllAsync(sAreaCode, sInpatientID, sHospitalCode, sInput, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatientFeeUpLoadAllAsync(string sAreaCode, string sInpatientID, string sHospitalCode, string sInput, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.InpatientFeeUpLoadAllOperationCompleted == null)) {
                this.InpatientFeeUpLoadAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatientFeeUpLoadAllOperationCompleted);
            }
            this.InvokeAsync("InpatientFeeUpLoadAll", new object[] {
                        sAreaCode,
                        sInpatientID,
                        sHospitalCode,
                        sInput,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.InpatientFeeUpLoadAllOperationCompleted, userState);
        }
        
        private void OnInpatientFeeUpLoadAllOperationCompleted(object arg) {
            if ((this.InpatientFeeUpLoadAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatientFeeUpLoadAllCompleted(this, new InpatientFeeUpLoadAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#InpatDiagnosisUpdate", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int InpatDiagnosisUpdate(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string sInpatientID, 
                    string sStature, 
                    string sWeight, 
                    string sTreatCode, 
                    string sIcdno, 
                    string sIcdName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sMessage) {
            object[] results = this.Invoke("InpatDiagnosisUpdate", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sInpatientID,
                        sStature,
                        sWeight,
                        sTreatCode,
                        sIcdno,
                        sIcdName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InpatDiagnosisUpdateAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string sInpatientID, 
                    string sStature, 
                    string sWeight, 
                    string sTreatCode, 
                    string sIcdno, 
                    string sIcdName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage) {
            this.InpatDiagnosisUpdateAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, sInpatientID, sStature, sWeight, sTreatCode, sIcdno, sIcdName, sSectionOfficeCode, sCureCode, sInHospitalCode, sInHosptialDate, sOperatorName, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void InpatDiagnosisUpdateAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string sInpatientID, 
                    string sStature, 
                    string sWeight, 
                    string sTreatCode, 
                    string sIcdno, 
                    string sIcdName, 
                    string sSectionOfficeCode, 
                    string sCureCode, 
                    string sInHospitalCode, 
                    string sInHosptialDate, 
                    string sOperatorName, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sMessage, 
                    object userState) {
            if ((this.InpatDiagnosisUpdateOperationCompleted == null)) {
                this.InpatDiagnosisUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInpatDiagnosisUpdateOperationCompleted);
            }
            this.InvokeAsync("InpatDiagnosisUpdate", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sInpatientID,
                        sStature,
                        sWeight,
                        sTreatCode,
                        sIcdno,
                        sIcdName,
                        sSectionOfficeCode,
                        sCureCode,
                        sInHospitalCode,
                        sInHosptialDate,
                        sOperatorName,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.InpatDiagnosisUpdateOperationCompleted, userState);
        }
        
        private void OnInpatDiagnosisUpdateOperationCompleted(object arg) {
            if ((this.InpatDiagnosisUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InpatDiagnosisUpdateCompleted(this, new InpatDiagnosisUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownTreat", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownTreat(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sYear, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownTreat", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sYear,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownTreatAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sYear, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownTreatAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, sYear, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownTreatAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sYear, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownTreatOperationCompleted == null)) {
                this.DownTreatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownTreatOperationCompleted);
            }
            this.InvokeAsync("DownTreat", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sYear,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownTreatOperationCompleted, userState);
        }
        
        private void OnDownTreatOperationCompleted(object arg) {
            if ((this.DownTreatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownTreatCompleted(this, new DownTreatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownICD", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownICD(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownICD", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownICDAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownICDAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownICDAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownICDOperationCompleted == null)) {
                this.DownICDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownICDOperationCompleted);
            }
            this.InvokeAsync("DownICD", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownICDOperationCompleted, userState);
        }
        
        private void OnDownICDOperationCompleted(object arg) {
            if ((this.DownICDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownICDCompleted(this, new DownICDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#DownHospitals", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DownHospitals(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string updateTime, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sResult, ref string sMessage) {
            object[] results = this.Invoke("DownHospitals", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        updateTime,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownHospitalsAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string updateTime, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage) {
            this.DownHospitalsAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, updateTime, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void DownHospitalsAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string updateTime, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sResult, string sMessage, object userState) {
            if ((this.DownHospitalsOperationCompleted == null)) {
                this.DownHospitalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownHospitalsOperationCompleted);
            }
            this.InvokeAsync("DownHospitals", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        updateTime,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.DownHospitalsOperationCompleted, userState);
        }
        
        private void OnDownHospitalsOperationCompleted(object arg) {
            if ((this.DownHospitalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownHospitalsCompleted(this, new DownHospitalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#uploadTransfer", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int uploadTransfer(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string truncode, 
                    string stype, 
                    string memberno, 
                    string idcardno, 
                    string name, 
                    string sex, 
                    string birthday, 
                    string bookno, 
                    string telphone, 
                    string turntype, 
                    string icdcode, 
                    string icdname, 
                    string turndate, 
                    string fromhospitalcode, 
                    string fromhospitalname, 
                    string tohospitalcode, 
                    string tohospitalname, 
                    string tohospitallevel, 
                    string tohospitalteclevel, 
                    string leavedateoflasttime, 
                    string outofficeoflasttime, 
                    string icdcodeoflasttime, 
                    string icdnameoflasttime, 
                    string doctorname, 
                    string remark, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string Outtruncode, 
                    ref string sMessage) {
            object[] results = this.Invoke("uploadTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        truncode,
                        stype,
                        memberno,
                        idcardno,
                        name,
                        sex,
                        birthday,
                        bookno,
                        telphone,
                        turntype,
                        icdcode,
                        icdname,
                        turndate,
                        fromhospitalcode,
                        fromhospitalname,
                        tohospitalcode,
                        tohospitalname,
                        tohospitallevel,
                        tohospitalteclevel,
                        leavedateoflasttime,
                        outofficeoflasttime,
                        icdcodeoflasttime,
                        icdnameoflasttime,
                        doctorname,
                        remark,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        Outtruncode,
                        sMessage});
            Outtruncode = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void uploadTransferAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string truncode, 
                    string stype, 
                    string memberno, 
                    string idcardno, 
                    string name, 
                    string sex, 
                    string birthday, 
                    string bookno, 
                    string telphone, 
                    string turntype, 
                    string icdcode, 
                    string icdname, 
                    string turndate, 
                    string fromhospitalcode, 
                    string fromhospitalname, 
                    string tohospitalcode, 
                    string tohospitalname, 
                    string tohospitallevel, 
                    string tohospitalteclevel, 
                    string leavedateoflasttime, 
                    string outofficeoflasttime, 
                    string icdcodeoflasttime, 
                    string icdnameoflasttime, 
                    string doctorname, 
                    string remark, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string Outtruncode, 
                    string sMessage) {
            this.uploadTransferAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, truncode, stype, memberno, idcardno, name, sex, birthday, bookno, telphone, turntype, icdcode, icdname, turndate, fromhospitalcode, fromhospitalname, tohospitalcode, tohospitalname, tohospitallevel, tohospitalteclevel, leavedateoflasttime, outofficeoflasttime, icdcodeoflasttime, icdnameoflasttime, doctorname, remark, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, Outtruncode, sMessage, null);
        }
        
        /// <remarks/>
        public void uploadTransferAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string truncode, 
                    string stype, 
                    string memberno, 
                    string idcardno, 
                    string name, 
                    string sex, 
                    string birthday, 
                    string bookno, 
                    string telphone, 
                    string turntype, 
                    string icdcode, 
                    string icdname, 
                    string turndate, 
                    string fromhospitalcode, 
                    string fromhospitalname, 
                    string tohospitalcode, 
                    string tohospitalname, 
                    string tohospitallevel, 
                    string tohospitalteclevel, 
                    string leavedateoflasttime, 
                    string outofficeoflasttime, 
                    string icdcodeoflasttime, 
                    string icdnameoflasttime, 
                    string doctorname, 
                    string remark, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string Outtruncode, 
                    string sMessage, 
                    object userState) {
            if ((this.uploadTransferOperationCompleted == null)) {
                this.uploadTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadTransferOperationCompleted);
            }
            this.InvokeAsync("uploadTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        truncode,
                        stype,
                        memberno,
                        idcardno,
                        name,
                        sex,
                        birthday,
                        bookno,
                        telphone,
                        turntype,
                        icdcode,
                        icdname,
                        turndate,
                        fromhospitalcode,
                        fromhospitalname,
                        tohospitalcode,
                        tohospitalname,
                        tohospitallevel,
                        tohospitalteclevel,
                        leavedateoflasttime,
                        outofficeoflasttime,
                        icdcodeoflasttime,
                        icdnameoflasttime,
                        doctorname,
                        remark,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        Outtruncode,
                        sMessage}, this.uploadTransferOperationCompleted, userState);
        }
        
        private void OnuploadTransferOperationCompleted(object arg) {
            if ((this.uploadTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadTransferCompleted(this, new uploadTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#cancelTransfer", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int cancelTransfer(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string truncode, string memberno, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, ref string sMessage) {
            object[] results = this.Invoke("cancelTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        truncode,
                        memberno,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage});
            sMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelTransferAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string truncode, string memberno, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage) {
            this.cancelTransferAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, truncode, memberno, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sMessage, null);
        }
        
        /// <remarks/>
        public void cancelTransferAsync(string sAreaCode, string sUserCode, string sUserPass, string sHospitalCode, string truncode, string memberno, string sObligate1, string sObligate2, string sObligate3, string sObligate4, string sObligate5, string sMessage, object userState) {
            if ((this.cancelTransferOperationCompleted == null)) {
                this.cancelTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelTransferOperationCompleted);
            }
            this.InvokeAsync("cancelTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        truncode,
                        memberno,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sMessage}, this.cancelTransferOperationCompleted, userState);
        }
        
        private void OncancelTransferOperationCompleted(object arg) {
            if ((this.cancelTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelTransferCompleted(this, new cancelTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:JQCenterWebServiceIntf-IJQCenterWebService#downloadTransfer", RequestNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService", ResponseNamespace="urn:JQCenterWebServiceIntf-IJQCenterWebService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int downloadTransfer(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string inorout, 
                    string truncode, 
                    string memberno, 
                    string startturndate, 
                    string endturndate, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    ref string sResult, 
                    ref string sMessage) {
            object[] results = this.Invoke("downloadTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        inorout,
                        truncode,
                        memberno,
                        startturndate,
                        endturndate,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage});
            sResult = ((string)(results[1]));
            sMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void downloadTransferAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string inorout, 
                    string truncode, 
                    string memberno, 
                    string startturndate, 
                    string endturndate, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage) {
            this.downloadTransferAsync(sAreaCode, sUserCode, sUserPass, sHospitalCode, inorout, truncode, memberno, startturndate, endturndate, sObligate1, sObligate2, sObligate3, sObligate4, sObligate5, sResult, sMessage, null);
        }
        
        /// <remarks/>
        public void downloadTransferAsync(
                    string sAreaCode, 
                    string sUserCode, 
                    string sUserPass, 
                    string sHospitalCode, 
                    string inorout, 
                    string truncode, 
                    string memberno, 
                    string startturndate, 
                    string endturndate, 
                    string sObligate1, 
                    string sObligate2, 
                    string sObligate3, 
                    string sObligate4, 
                    string sObligate5, 
                    string sResult, 
                    string sMessage, 
                    object userState) {
            if ((this.downloadTransferOperationCompleted == null)) {
                this.downloadTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadTransferOperationCompleted);
            }
            this.InvokeAsync("downloadTransfer", new object[] {
                        sAreaCode,
                        sUserCode,
                        sUserPass,
                        sHospitalCode,
                        inorout,
                        truncode,
                        memberno,
                        startturndate,
                        endturndate,
                        sObligate1,
                        sObligate2,
                        sObligate3,
                        sObligate4,
                        sObligate5,
                        sResult,
                        sMessage}, this.downloadTransferOperationCompleted, userState);
        }
        
        private void OndownloadTransferOperationCompleted(object arg) {
            if ((this.downloadTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadTransferCompleted(this, new downloadTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ConnectTestCompletedEventHandler(object sender, ConnectTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetPersonInfoCompletedEventHandler(object sender, GetPersonInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPersonInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPersonInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientRegisterCompletedEventHandler(object sender, InpatientRegisterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientRegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientRegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sInpatientID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientRegisterModifyCompletedEventHandler(object sender, InpatientRegisterModifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientRegisterModifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientRegisterModifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientFeeUpLoadCompletedEventHandler(object sender, InpatientFeeUpLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientFeeUpLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientFeeUpLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientFeeCancelCompletedEventHandler(object sender, InpatientFeeCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientFeeCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientFeeCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientFeeCancelAllCompletedEventHandler(object sender, InpatientFeeCancelAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientFeeCancelAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientFeeCancelAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientRegisterCancelCompletedEventHandler(object sender, InpatientRegisterCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientRegisterCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientRegisterCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientOutRegisterCompletedEventHandler(object sender, InpatientOutRegisterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientOutRegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientOutRegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientOutRegisterCancelCompletedEventHandler(object sender, InpatientOutRegisterCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientOutRegisterCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientOutRegisterCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientTryCalculateCompletedEventHandler(object sender, InpatientTryCalculateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientTryCalculateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientTryCalculateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientCalculateCompletedEventHandler(object sender, InpatientCalculateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientCalculateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientCalculateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientCalculateCancelCompletedEventHandler(object sender, InpatientCalculateCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientCalculateCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientCalculateCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownloadInPFeeCompletedEventHandler(object sender, DownloadInPFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadInPFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadInPFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SubmitApplyCompletedEventHandler(object sender, SubmitApplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitApplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitApplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchApplyCompletedEventHandler(object sender, SearchApplyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchApplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchApplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ItemContrastUpCompletedEventHandler(object sender, ItemContrastUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemContrastUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ItemContrastUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ItemContrastDownCompletedEventHandler(object sender, ItemContrastDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemContrastDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ItemContrastDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownCalTypeCompletedEventHandler(object sender, DownCalTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownCalTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownCalTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchHospitalCompletedEventHandler(object sender, SearchHospitalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchHospitalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchHospitalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchItemCompletedEventHandler(object sender, SearchItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientAddFeeCompletedEventHandler(object sender, InpatientAddFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientAddFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientAddFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownItemListCompletedEventHandler(object sender, DownItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SearchCalcuRCompletedEventHandler(object sender, SearchCalcuRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCalcuRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCalcuRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownCalcuListCompletedEventHandler(object sender, DownCalcuListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownCalcuListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownCalcuListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ItemContrastAllDownCompletedEventHandler(object sender, ItemContrastAllDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemContrastAllDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ItemContrastAllDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ItemContrastAllUpCompletedEventHandler(object sender, ItemContrastAllUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemContrastAllUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ItemContrastAllUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatientFeeUpLoadAllCompletedEventHandler(object sender, InpatientFeeUpLoadAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatientFeeUpLoadAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatientFeeUpLoadAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InpatDiagnosisUpdateCompletedEventHandler(object sender, InpatDiagnosisUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InpatDiagnosisUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InpatDiagnosisUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownTreatCompletedEventHandler(object sender, DownTreatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownTreatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownTreatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownICDCompletedEventHandler(object sender, DownICDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownICDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownICDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DownHospitalsCompletedEventHandler(object sender, DownHospitalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownHospitalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownHospitalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void uploadTransferCompletedEventHandler(object sender, uploadTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Outtruncode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void cancelTransferCompletedEventHandler(object sender, cancelTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void downloadTransferCompletedEventHandler(object sender, downloadTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591